{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { Form, Field, withFormik } from 'formik';\nimport SingleModuleButton from 'components/UI/Buttons/SingleModuleButton';\nimport validations from './validations';\n\nvar InnerForm = function InnerForm(props) {\n  var errors = props.errors,\n      touched = props.touched;\n  return __jsx(Form, null, __jsx(\"div\", null, __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"source-account\"\n  }, \"Choose your account\"), __jsx(Field, {\n    component: \"select\",\n    className: \"form-control\",\n    id: \"source-account\",\n    name: \"sourceAccountId\",\n    placeholder: \"Your new email...\"\n  }, props.userAccountsList), touched.sourceAccountId && errors.sourceAccountId && __jsx(\"p\", null, errors.sourceAccountId)), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"payee-acc-number\"\n  }, \"Recipient's account number\"), __jsx(Field, {\n    type: \"text\",\n    className: \"form-control\",\n    id: \"payee-acc-number\",\n    name: \"payeeAccNumber\",\n    maxLength: \"8\",\n    placeholder: \"Recipient's account number...\"\n  }), touched.payeeAccNumber && errors.payeeAccNumber && __jsx(\"p\", {\n    className: \"field-invalid\"\n  }, errors.payeeAccNumber)), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"payee-sort-code\"\n  }, \"Recipient's sort code\"), __jsx(Field, {\n    type: \"text\",\n    className: \"form-control\",\n    id: \"payee-sort-code\",\n    name: \"payeeSortcode\",\n    maxLength: \"6\",\n    placeholder: \"Recipient's sort code...\"\n  }), touched.payeeSortcode && errors.payeeSortcode && __jsx(\"p\", {\n    className: \"field-invalid\"\n  }, errors.payeeSortcode)), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"payee-name\"\n  }, \"Recipient's name\"), __jsx(Field, {\n    type: \"text\",\n    className: \"form-control\",\n    id: \"payee-name\",\n    name: \"payeeName\",\n    placeholder: \"Recipient's name...\"\n  }), touched.payeeName && errors.payeeName && __jsx(\"p\", {\n    className: \"field-invalid\"\n  }, errors.payeeName)), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"payee-address\"\n  }, \"Recipient's address\"), __jsx(Field, {\n    component: \"textarea\",\n    className: \"form-control\",\n    id: \"payee-address\",\n    name: \"payeeAddress\",\n    rows: \"4\",\n    placeholder: \"Recipient's address...\"\n  }), touched.payeeAddress && errors.payeeAddress && __jsx(\"p\", {\n    className: \"field-invalid\"\n  }, errors.payeeAddress)), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"reference\"\n  }, \"Reference\"), __jsx(Field, {\n    type: \"text\",\n    className: \"form-control\",\n    id: \"reference\",\n    name: \"reference\",\n    maxLength: \"50\",\n    placeholder: \"Reference...\"\n  }), touched.reference && errors.reference && __jsx(\"p\", {\n    className: \"field-invalid\"\n  }, errors.reference)), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"amount\"\n  }, \"Amount\"), __jsx(Field, {\n    type: \"text\",\n    className: \"form-control\",\n    id: \"amount\",\n    name: \"amount\",\n    placeholder: \"Amount...\"\n  }), touched.amount && errors.amount && __jsx(\"p\", {\n    className: \"field-invalid\"\n  }, errors.amount)), __jsx(\"p\", {\n    className: \"validation-info\"\n  }, props.status)), __jsx(SingleModuleButton, {\n    text: \"Confirm transfer\",\n    type: \"submit\"\n  }));\n}; // Wrap our form with the using withFormik HoC\n\n\nvar NewTransferForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: function mapPropsToValues(props) {\n    return {\n      sourceAccountId: props.firstAccId,\n      payeeAccNumber: '',\n      payeeSortcode: '',\n      payeeName: '',\n      payeeAddress: '',\n      reference: '',\n      amount: ''\n    };\n  },\n  validationSchema: validations,\n  // Submission handler\n  handleSubmit: function handleSubmit(values, _ref) {\n    var props = _ref.props,\n        setStatus = _ref.setStatus;\n\n    // Prepare some data for API\n    var data = _objectSpread({}, values, {\n      sender: props.userId,\n      recipient: props.userId\n    });\n\n    setStatus('Sending...');\n    props.addTransfer(data).then(function (data) {\n      return setStatus('Transfer done!');\n    })[\"catch\"](function (error) {\n      return setStatus('Problems, try again...');\n    });\n  }\n})(InnerForm);\nexport default NewTransferForm;","map":null,"metadata":{},"sourceType":"module"}