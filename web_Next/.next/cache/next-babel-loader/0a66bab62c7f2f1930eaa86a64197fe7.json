{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _ from 'lodash';\nimport { getMyCards, changePin, changeLimits } from 'api/cards';\nimport * as actionTypes from './actionTypes'; // Get all user's cards\n\nexport var fetchCards = function fetchCards() {\n  return function _callee(dispatch) {\n    var data;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(getMyCards());\n\n          case 3:\n            data = _context.sent;\n\n            if (data) {\n              _context.next = 7;\n              break;\n            }\n\n            dispatch(fetchCardsStatus(false));\n            return _context.abrupt(\"return\");\n\n          case 7:\n            dispatch({\n              type: actionTypes.FETCH_CARDS,\n              data: data\n            });\n            _context.next = 13;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            dispatch(fetchCardsStatus(false));\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 10]], Promise);\n  };\n};\nexport var fetchCardsStatus = function fetchCardsStatus(status) {\n  return {\n    type: actionTypes.FETCH_CARDS_STATUS,\n    status: status\n  };\n}; // Change card's PIN\n\nexport var changeCardPin = function changeCardPin(id, newPin) {\n  return function _callee2(dispatch) {\n    var card;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(changePin(id, newPin));\n\n          case 3:\n            card = _context2.sent;\n\n            if (card) {\n              _context2.next = 6;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 6:\n            dispatch({\n              type: actionTypes.CARD_CHANGE_PIN,\n              id: id,\n              newPin: newPin\n            });\n            _context2.next = 11;\n            break;\n\n          case 9:\n            _context2.prev = 9;\n            _context2.t0 = _context2[\"catch\"](0);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  };\n}; // Change card's limits\n\nexport var changeCardLimits = function changeCardLimits(id, newOnlineLimit, newWithdrawalLimit) {\n  return function _callee3(dispatch) {\n    var limits, card;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            limits = {};\n\n            if (newOnlineLimit) {\n              limits.dailyOnlineLimit = parseFloat(newOnlineLimit).toFixed(2);\n            }\n\n            if (newWithdrawalLimit) {\n              limits.dailyWithdrawalLimit = parseFloat(newWithdrawalLimit).toFixed(2);\n            }\n\n            if (_.isEmpty(limits)) {\n              _context3.next = 11;\n              break;\n            }\n\n            _context3.next = 7;\n            return _regeneratorRuntime.awrap(changeLimits(id, _objectSpread({}, limits)));\n\n          case 7:\n            card = _context3.sent;\n\n            if (card) {\n              _context3.next = 10;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 10:\n            dispatch(_objectSpread({\n              type: actionTypes.CARD_CHANGE_LIMITS,\n              id: id\n            }, limits));\n\n          case 11:\n            _context3.next = 15;\n            break;\n\n          case 13:\n            _context3.prev = 13;\n            _context3.t0 = _context3[\"catch\"](0);\n\n          case 15:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 13]], Promise);\n  };\n};","map":{"version":3,"sources":["/Users/binduraj/Documents/GitHub/dollarbank/web_Next/helper/actions/cards.js"],"names":["_","getMyCards","changePin","changeLimits","actionTypes","fetchCards","dispatch","data","fetchCardsStatus","type","FETCH_CARDS","status","FETCH_CARDS_STATUS","changeCardPin","id","newPin","card","CARD_CHANGE_PIN","changeCardLimits","newOnlineLimit","newWithdrawalLimit","limits","dailyOnlineLimit","parseFloat","toFixed","dailyWithdrawalLimit","isEmpty","CARD_CHANGE_LIMITS"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport { getMyCards, changePin, changeLimits } from 'api/cards';\nimport * as actionTypes from './actionTypes';\n\n// Get all user's cards\nexport const fetchCards = () => async dispatch => {\n   try {\n      const data = await getMyCards();\n\n      if (!data) {\n         dispatch(fetchCardsStatus(false));\n         return;\n      }\n\n      dispatch({ type: actionTypes.FETCH_CARDS, data });\n   } catch (err) {\n      dispatch(fetchCardsStatus(false));\n   }\n};\n\nexport const fetchCardsStatus = status => ({\n   type: actionTypes.FETCH_CARDS_STATUS,\n   status\n});\n\n// Change card's PIN\nexport const changeCardPin = (id, newPin) => async dispatch => {\n   try {\n      const card = await changePin(id, newPin);\n\n      if (!card) {\n         return;\n      }\n\n      dispatch({ type: actionTypes.CARD_CHANGE_PIN, id, newPin });\n   } catch (err) {}\n};\n\n// Change card's limits\nexport const changeCardLimits = (id, newOnlineLimit, newWithdrawalLimit) => async dispatch => {\n   try {\n      const limits = {};\n\n      if (newOnlineLimit) {\n         limits.dailyOnlineLimit = parseFloat(newOnlineLimit).toFixed(2);\n      }\n\n      if (newWithdrawalLimit) {\n         limits.dailyWithdrawalLimit = parseFloat(newWithdrawalLimit).toFixed(2);\n      }\n\n      if (!_.isEmpty(limits)) {\n         const card = await changeLimits(id, { ...limits });\n\n         if (!card) {\n            return;\n         }\n\n         dispatch({\n            type: actionTypes.CARD_CHANGE_LIMITS,\n            id,\n            ...limits\n         });\n      }\n   } catch (err) {}\n};\n"]},"metadata":{},"sourceType":"module"}