{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { Form, Field, withFormik } from 'formik';\nimport SingleModuleButton from 'components/UI/Buttons/SingleModuleButton';\nimport validations from './validations';\n\nconst InnerForm = props => {\n  const {\n    errors,\n    touched\n  } = props;\n  return __jsx(Form, null, __jsx(\"div\", null, __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"source-account\"\n  }, \"Choose your account\"), __jsx(Field, {\n    component: \"select\",\n    className: \"form-control\",\n    id: \"source-account\",\n    name: \"sourceAccountId\",\n    placeholder: \"Your new email...\"\n  }, props.userAccountsList), touched.sourceAccountId && errors.sourceAccountId && __jsx(\"p\", null, errors.sourceAccountId)), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"payee-acc-number\"\n  }, \"Recipient's account number\"), __jsx(Field, {\n    type: \"text\",\n    className: \"form-control\",\n    id: \"payee-acc-number\",\n    name: \"payeeAccNumber\",\n    maxLength: \"8\",\n    placeholder: \"Recipient's account number...\"\n  }), touched.payeeAccNumber && errors.payeeAccNumber && __jsx(\"p\", {\n    className: \"field-invalid\"\n  }, errors.payeeAccNumber)), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"payee-sort-code\"\n  }, \"Recipient's sort code\"), __jsx(Field, {\n    type: \"text\",\n    className: \"form-control\",\n    id: \"payee-sort-code\",\n    name: \"payeeSortcode\",\n    maxLength: \"6\",\n    placeholder: \"Recipient's sort code...\"\n  }), touched.payeeSortcode && errors.payeeSortcode && __jsx(\"p\", {\n    className: \"field-invalid\"\n  }, errors.payeeSortcode)), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"payee-name\"\n  }, \"Recipient's name\"), __jsx(Field, {\n    type: \"text\",\n    className: \"form-control\",\n    id: \"payee-name\",\n    name: \"payeeName\",\n    placeholder: \"Recipient's name...\"\n  }), touched.payeeName && errors.payeeName && __jsx(\"p\", {\n    className: \"field-invalid\"\n  }, errors.payeeName)), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"payee-address\"\n  }, \"Recipient's address\"), __jsx(Field, {\n    component: \"textarea\",\n    className: \"form-control\",\n    id: \"payee-address\",\n    name: \"payeeAddress\",\n    rows: \"4\",\n    placeholder: \"Recipient's address...\"\n  }), touched.payeeAddress && errors.payeeAddress && __jsx(\"p\", {\n    className: \"field-invalid\"\n  }, errors.payeeAddress)), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"reference\"\n  }, \"Reference\"), __jsx(Field, {\n    type: \"text\",\n    className: \"form-control\",\n    id: \"reference\",\n    name: \"reference\",\n    maxLength: \"50\",\n    placeholder: \"Reference...\"\n  }), touched.reference && errors.reference && __jsx(\"p\", {\n    className: \"field-invalid\"\n  }, errors.reference)), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"amount\"\n  }, \"Amount\"), __jsx(Field, {\n    type: \"text\",\n    className: \"form-control\",\n    id: \"amount\",\n    name: \"amount\",\n    placeholder: \"Amount...\"\n  }), touched.amount && errors.amount && __jsx(\"p\", {\n    className: \"field-invalid\"\n  }, errors.amount)), __jsx(\"p\", {\n    className: \"validation-info\"\n  }, props.status)), __jsx(SingleModuleButton, {\n    text: \"Confirm transfer\",\n    type: \"submit\"\n  }));\n}; // Wrap our form with the using withFormik HoC\n\n\nconst NewTransferForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => ({\n    sourceAccountId: props.firstAccId,\n    payeeAccNumber: '',\n    payeeSortcode: '',\n    payeeName: '',\n    payeeAddress: '',\n    reference: '',\n    amount: ''\n  }),\n  validationSchema: validations,\n  // Submission handler\n  handleSubmit: (values, {\n    props,\n    setStatus\n  }) => {\n    // Prepare some data for API\n    const data = _objectSpread({}, values, {\n      sender: props.userId,\n      recipient: props.userId\n    });\n\n    setStatus('Sending...');\n    props.addTransfer(data).then(data => setStatus('Transfer done!')).catch(error => setStatus('Problems, try again...'));\n  }\n})(InnerForm);\nexport default NewTransferForm;","map":{"version":3,"sources":["/Users/binduraj/Documents/GitHub/dollarbank/web_Next/components/components/Transfers/New/Form.js"],"names":["React","Form","Field","withFormik","SingleModuleButton","validations","InnerForm","props","errors","touched","userAccountsList","sourceAccountId","payeeAccNumber","payeeSortcode","payeeName","payeeAddress","reference","amount","status","NewTransferForm","mapPropsToValues","firstAccId","validationSchema","handleSubmit","values","setStatus","data","sender","userId","recipient","addTransfer","then","catch","error"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Form, Field, withFormik } from 'formik';\nimport SingleModuleButton from 'components/UI/Buttons/SingleModuleButton';\nimport validations from './validations';\n\nconst InnerForm = props => {\n   const { errors, touched } = props;\n\n   return (\n      <Form>\n         <div>\n            <div className=\"form-group\">\n               <label htmlFor=\"source-account\">Choose your account</label>\n               <Field\n                  component=\"select\"\n                  className=\"form-control\"\n                  id=\"source-account\"\n                  name=\"sourceAccountId\"\n                  placeholder=\"Your new email...\"\n               >\n                  {props.userAccountsList}\n               </Field>\n               {touched.sourceAccountId && errors.sourceAccountId && (\n                  <p>{errors.sourceAccountId}</p>\n               )}\n            </div>\n\n            <div className=\"form-group\">\n               <label htmlFor=\"payee-acc-number\">Recipient's account number</label>\n\n               <Field\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"payee-acc-number\"\n                  name=\"payeeAccNumber\"\n                  maxLength=\"8\"\n                  placeholder=\"Recipient's account number...\"\n               />\n               {touched.payeeAccNumber && errors.payeeAccNumber && (\n                  <p className=\"field-invalid\">{errors.payeeAccNumber}</p>\n               )}\n            </div>\n\n            <div className=\"form-group\">\n               <label htmlFor=\"payee-sort-code\">Recipient's sort code</label>\n\n               <Field\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"payee-sort-code\"\n                  name=\"payeeSortcode\"\n                  maxLength=\"6\"\n                  placeholder=\"Recipient's sort code...\"\n               />\n               {touched.payeeSortcode && errors.payeeSortcode && (\n                  <p className=\"field-invalid\">{errors.payeeSortcode}</p>\n               )}\n            </div>\n\n            <div className=\"form-group\">\n               <label htmlFor=\"payee-name\">Recipient's name</label>\n\n               <Field\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"payee-name\"\n                  name=\"payeeName\"\n                  placeholder=\"Recipient's name...\"\n               />\n               {touched.payeeName && errors.payeeName && (\n                  <p className=\"field-invalid\">{errors.payeeName}</p>\n               )}\n            </div>\n\n            <div className=\"form-group\">\n               <label htmlFor=\"payee-address\">Recipient's address</label>\n\n               <Field\n                  component=\"textarea\"\n                  className=\"form-control\"\n                  id=\"payee-address\"\n                  name=\"payeeAddress\"\n                  rows=\"4\"\n                  placeholder=\"Recipient's address...\"\n               />\n               {touched.payeeAddress && errors.payeeAddress && (\n                  <p className=\"field-invalid\">{errors.payeeAddress}</p>\n               )}\n            </div>\n\n            <div className=\"form-group\">\n               <label htmlFor=\"reference\">Reference</label>\n\n               <Field\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"reference\"\n                  name=\"reference\"\n                  maxLength=\"50\"\n                  placeholder=\"Reference...\"\n               />\n               {touched.reference && errors.reference && (\n                  <p className=\"field-invalid\">{errors.reference}</p>\n               )}\n            </div>\n\n            <div className=\"form-group\">\n               <label htmlFor=\"amount\">Amount</label>\n\n               <Field\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"amount\"\n                  name=\"amount\"\n                  placeholder=\"Amount...\"\n               />\n               {touched.amount && errors.amount && <p className=\"field-invalid\">{errors.amount}</p>}\n            </div>\n\n            <p className=\"validation-info\">{props.status}</p>\n         </div>\n\n         <SingleModuleButton text=\"Confirm transfer\" type=\"submit\" />\n      </Form>\n   );\n};\n\n// Wrap our form with the using withFormik HoC\nconst NewTransferForm = withFormik({\n   // Transform outer props into form values\n   mapPropsToValues: props => ({\n      sourceAccountId: props.firstAccId,\n      payeeAccNumber: '',\n      payeeSortcode: '',\n      payeeName: '',\n      payeeAddress: '',\n      reference: '',\n      amount: ''\n   }),\n\n   validationSchema: validations,\n\n   // Submission handler\n   handleSubmit: (values, { props, setStatus }) => {\n      // Prepare some data for API\n      const data = {\n         ...values,\n         sender: props.userId,\n         recipient: props.userId\n      };\n\n      setStatus('Sending...');\n\n      props\n         .addTransfer(data)\n         .then(data => setStatus('Transfer done!'))\n         .catch(error => setStatus('Problems, try again...'));\n   }\n})(InnerForm);\n\nexport default NewTransferForm;\n"]},"metadata":{},"sourceType":"module"}