{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { getMyMessages, toggleMessageRead, removeMessage } from 'api/messages';\nimport * as actionTypes from './actionTypes'; // Fetch messages\n\nexport var fetchMessages = function fetchMessages() {\n  return function _callee(dispatch) {\n    var data;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            // Set status to false on every start, so it can be reusable\n            dispatch(fetchMessagesStatus(false));\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(getMyMessages());\n\n          case 4:\n            data = _context.sent;\n\n            if (data) {\n              _context.next = 8;\n              break;\n            }\n\n            dispatch(fetchMessagesStatus(false));\n            return _context.abrupt(\"return\");\n\n          case 8:\n            dispatch({\n              type: actionTypes.FETCH_MESSAGES,\n              data: data\n            });\n            _context.next = 14;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](0);\n            dispatch(fetchMessagesStatus(false));\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 11]], Promise);\n  };\n};\nexport var fetchMessagesStatus = function fetchMessagesStatus(status) {\n  return {\n    type: actionTypes.FETCH_MESSAGES_STATUS,\n    status: status\n  };\n}; // Toggle message read\n\nexport var messageToggle = function messageToggle(id) {\n  return function _callee2(dispatch) {\n    var message;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(toggleMessageRead(id));\n\n          case 3:\n            message = _context2.sent;\n\n            if (message) {\n              _context2.next = 6;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 6:\n            dispatch({\n              type: actionTypes.MESSAGE_TOGGLE,\n              id: id\n            });\n            _context2.next = 11;\n            break;\n\n          case 9:\n            _context2.prev = 9;\n            _context2.t0 = _context2[\"catch\"](0);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  };\n}; // Remove message\n\nexport var messageRemove = function messageRemove(id) {\n  return function _callee3(dispatch) {\n    var message;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(removeMessage(id));\n\n          case 3:\n            message = _context3.sent;\n\n            if (message) {\n              _context3.next = 6;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 6:\n            dispatch({\n              type: actionTypes.MESSAGE_REMOVE,\n              id: id\n            });\n            _context3.next = 11;\n            break;\n\n          case 9:\n            _context3.prev = 9;\n            _context3.t0 = _context3[\"catch\"](0);\n\n          case 11:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  };\n};","map":null,"metadata":{},"sourceType":"module"}