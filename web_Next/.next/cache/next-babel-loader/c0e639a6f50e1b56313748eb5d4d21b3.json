{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { Form, Field, withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport SingleModuleButton from 'components/UI/Buttons/SingleModuleButton';\n\nvar InnerForm = function InnerForm(props) {\n  var errors = props.errors,\n      touched = props.touched;\n  return __jsx(Form, null, __jsx(\"div\", null, __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"daily-online-limit\"\n  }, \"Enter new daily online limit\"), __jsx(Field, {\n    type: \"text\",\n    id: \"daily-online-limit\",\n    className: \"form-control\",\n    name: \"dailyOnlineLimit\",\n    placeholder: \"New daily online limit...\"\n  }), touched.dailyOnlineLimit && errors.dailyOnlineLimit && __jsx(\"p\", null, errors.dailyOnlineLimit)), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"daily-withdrawal-limit\"\n  }, \"Enter new daily withdrawal limit\"), __jsx(Field, {\n    type: \"text\",\n    id: \"daily-withdrawal-limit\",\n    className: \"form-control\",\n    name: \"dailyWithdrawalLimit\",\n    placeholder: \"New daily withdrawal limit...\"\n  }), touched.dailyWithdrawalLimit && errors.dailyWithdrawalLimit && __jsx(\"p\", null, errors.dailyWithdrawalLimit)), __jsx(\"p\", {\n    className: \"validation-info\"\n  }, props.status)), __jsx(SingleModuleButton, {\n    text: \"Change limits\",\n    type: \"submit\"\n  }));\n};\n\nvar LimitsChangeForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: function mapPropsToValues(props) {\n    return {\n      dailyOnlineLimit: props.currentOnlineLimit,\n      dailyWithdrawalLimit: props.currentWithdrawalLimit\n    };\n  },\n  validationSchema: Yup.object().shape({\n    dailyWithdrawalLimit: Yup.number().typeError('It must be a number').positive('Please enter a positive number'),\n    dailyOnlineLimit: Yup.number().typeError('It must be a number').positive('Please enter a positive number')\n  }),\n  // Submission handler\n  handleSubmit: function handleSubmit(values, _ref) {\n    var props = _ref.props,\n        setStatus = _ref.setStatus;\n    var dailyOnlineLimit = values.dailyOnlineLimit,\n        dailyWithdrawalLimit = values.dailyWithdrawalLimit;\n\n    if (!dailyOnlineLimit && !dailyWithdrawalLimit) {\n      setStatus('No limits changed');\n      return;\n    }\n\n    setStatus('Sending...');\n    props.changeCardLimits(dailyOnlineLimit, dailyWithdrawalLimit).then(function (data) {\n      return setStatus('Limits successfully changed!');\n    })[\"catch\"](function (error) {\n      return setStatus('Problems, try again...');\n    });\n  }\n})(InnerForm);\nexport default LimitsChangeForm;","map":null,"metadata":{},"sourceType":"module"}