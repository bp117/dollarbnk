{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as actionTypes from 'actions/actionTypes';\nvar initialState = {\n  data: [],\n  status: true\n};\n\nvar messages = function messages() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var data;\n\n  switch (action.type) {\n    case actionTypes.FETCH_MESSAGES:\n      return _objectSpread({}, state, {\n        data: _toConsumableArray(action.data),\n        status: true\n      });\n\n    case actionTypes.FETCH_MESSAGES_STATUS:\n      return _objectSpread({}, state, {\n        status: action.status\n      });\n\n    case actionTypes.MESSAGE_TOGGLE:\n      data = state.data;\n      var foundMsg = data.find(function (msg) {\n        return msg._id === action.id;\n      });\n      foundMsg.isRead = !foundMsg.isRead;\n      return _objectSpread({}, state, {\n        data: _toConsumableArray(data)\n      });\n\n    case actionTypes.MESSAGE_REMOVE:\n      data = state.data.filter(function (msg) {\n        return msg._id !== action.id;\n      });\n      return _objectSpread({}, state, {\n        data: _toConsumableArray(data)\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default messages;","map":{"version":3,"sources":["/Users/binduraj/Documents/GitHub/dollarbank/web_Next/helper/reducers/messages.js"],"names":["actionTypes","initialState","data","status","messages","state","action","type","FETCH_MESSAGES","FETCH_MESSAGES_STATUS","MESSAGE_TOGGLE","foundMsg","find","msg","_id","id","isRead","MESSAGE_REMOVE","filter"],"mappings":";;;;;;;AAAA,OAAO,KAAKA,WAAZ,MAA6B,qBAA7B;AAEA,IAAMC,YAAY,GAAG;AAClBC,EAAAA,IAAI,EAAE,EADY;AAElBC,EAAAA,MAAM,EAAE;AAFU,CAArB;;AAKA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBJ,YAAyB;AAAA,MAAXK,MAAW;AAChD,MAAIJ,IAAJ;;AAEA,UAAQI,MAAM,CAACC,IAAf;AACG,SAAKP,WAAW,CAACQ,cAAjB;AACG,+BACMH,KADN;AAEGH,QAAAA,IAAI,qBAAMI,MAAM,CAACJ,IAAb,CAFP;AAGGC,QAAAA,MAAM,EAAE;AAHX;;AAMH,SAAKH,WAAW,CAACS,qBAAjB;AACG,+BACMJ,KADN;AAEGF,QAAAA,MAAM,EAAEG,MAAM,CAACH;AAFlB;;AAKH,SAAKH,WAAW,CAACU,cAAjB;AACGR,MAAAA,IAAI,GAAGG,KAAK,CAACH,IAAb;AACA,UAAMS,QAAQ,GAAGT,IAAI,CAACU,IAAL,CAAU,UAAAC,GAAG;AAAA,eAAIA,GAAG,CAACC,GAAJ,KAAYR,MAAM,CAACS,EAAvB;AAAA,OAAb,CAAjB;AAEAJ,MAAAA,QAAQ,CAACK,MAAT,GAAkB,CAACL,QAAQ,CAACK,MAA5B;AAEA,+BACMX,KADN;AAEGH,QAAAA,IAAI,qBAAMA,IAAN;AAFP;;AAKH,SAAKF,WAAW,CAACiB,cAAjB;AACGf,MAAAA,IAAI,GAAGG,KAAK,CAACH,IAAN,CAAWgB,MAAX,CAAkB,UAAAL,GAAG;AAAA,eAAIA,GAAG,CAACC,GAAJ,KAAYR,MAAM,CAACS,EAAvB;AAAA,OAArB,CAAP;AAEA,+BACMV,KADN;AAEGH,QAAAA,IAAI,qBAAMA,IAAN;AAFP;;AAKH;AACG,aAAOG,KAAP;AAlCN;AAoCF,CAvCD;;AAyCA,eAAeD,QAAf","sourcesContent":["import * as actionTypes from 'actions/actionTypes';\n\nconst initialState = {\n   data: [],\n   status: true\n};\n\nconst messages = (state = initialState, action) => {\n   let data;\n\n   switch (action.type) {\n      case actionTypes.FETCH_MESSAGES:\n         return {\n            ...state,\n            data: [...action.data],\n            status: true\n         };\n\n      case actionTypes.FETCH_MESSAGES_STATUS:\n         return {\n            ...state,\n            status: action.status\n         };\n\n      case actionTypes.MESSAGE_TOGGLE:\n         data = state.data;\n         const foundMsg = data.find(msg => msg._id === action.id);\n\n         foundMsg.isRead = !foundMsg.isRead;\n\n         return {\n            ...state,\n            data: [...data]\n         };\n\n      case actionTypes.MESSAGE_REMOVE:\n         data = state.data.filter(msg => msg._id !== action.id);\n\n         return {\n            ...state,\n            data: [...data]\n         };\n\n      default:\n         return state;\n   }\n};\n\nexport default messages;\n"]},"metadata":{},"sourceType":"module"}