{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as actionTypes from 'actions/actionTypes';\nconst initialState = {\n  initialDataStatus: false\n};\n\nconst panel = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.FETCH_INITIAL_DATA_STATUS:\n      return _objectSpread({}, state, {\n        initialDataStatus: action.status\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default panel;","map":{"version":3,"sources":["/Users/binduraj/Documents/GitHub/dollarbank/web_Next/helper/reducers/panel.js"],"names":["actionTypes","initialState","initialDataStatus","panel","state","action","type","FETCH_INITIAL_DATA_STATUS","status"],"mappings":";;;;;;AAAA,OAAO,KAAKA,WAAZ,MAA6B,qBAA7B;AAEA,MAAMC,YAAY,GAAG;AAClBC,EAAAA,iBAAiB,EAAE;AADD,CAArB;;AAIA,MAAMC,KAAK,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACG,SAAKN,WAAW,CAACO,yBAAjB;AACG,+BACMH,KADN;AAEGF,QAAAA,iBAAiB,EAAEG,MAAM,CAACG;AAF7B;;AAKH;AACG,aAAOJ,KAAP;AARN;AAUF,CAXD;;AAaA,eAAeD,KAAf","sourcesContent":["import * as actionTypes from 'actions/actionTypes';\n\nconst initialState = {\n   initialDataStatus: false\n};\n\nconst panel = (state = initialState, action) => {\n   switch (action.type) {\n      case actionTypes.FETCH_INITIAL_DATA_STATUS:\n         return {\n            ...state,\n            initialDataStatus: action.status\n         };\n\n      default:\n         return state;\n   }\n};\n\nexport default panel;\n"]},"metadata":{},"sourceType":"module"}