{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'next/router';\nimport * as actions from 'actions';\nimport MessagesListEl from '../ListElement';\n\nclass MessagesList extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"findMessage\", () => {\n      this.setState({\n        search: this.refs.search.value\n      });\n    });\n\n    this.state = {\n      search: ''\n    };\n  }\n\n  render() {\n    // Messages\n    // Allow search by message title\n    const searchText = this.state.search.toLowerCase();\n    const messagesList = this.props.messages.filter(message => message.title.toLowerCase().includes(searchText)).map(message => __jsx(MessagesListEl, _extends({\n      key: message._id\n    }, message, {\n      matchUrl: this.props.router.asPath,\n      onToggle: this.props.messageToggle,\n      onRemove: this.props.messageRemove\n    })));\n    return __jsx(Fragment, null, __jsx(\"h1\", null, \"Messages\"), __jsx(\"p\", null, \"There are \", this.props.messages.length, \" messages in your box\"), __jsx(\"div\", {\n      className: \"form-group\"\n    }, __jsx(\"input\", {\n      className: \"form-control\",\n      placeholder: \"Search for...\",\n      onChange: this.findMessage,\n      ref: \"search\"\n    })), __jsx(\"div\", {\n      className: \"list-group\"\n    }, messagesList));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    messages: state.messages.data\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    messageToggle: id => dispatch(actions.messageToggle(id)),\n    messageRemove: id => dispatch(actions.messageRemove(id))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(MessagesList));","map":null,"metadata":{},"sourceType":"module"}