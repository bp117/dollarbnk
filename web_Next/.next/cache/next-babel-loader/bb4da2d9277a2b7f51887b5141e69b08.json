{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'next/router';\nimport * as actions from 'actions';\nimport MessagesListEl from '../ListElement';\n\nvar MessagesList = /*#__PURE__*/function (_Component) {\n  _inherits(MessagesList, _Component);\n\n  var _super = _createSuper(MessagesList);\n\n  function MessagesList(props) {\n    var _this;\n\n    _classCallCheck(this, MessagesList);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"findMessage\", function () {\n      _this.setState({\n        search: _this.refs.search.value\n      });\n    });\n\n    _this.state = {\n      search: ''\n    };\n    return _this;\n  }\n\n  _createClass(MessagesList, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // Messages\n      // Allow search by message title\n      var searchText = this.state.search.toLowerCase();\n      var messagesList = this.props.messages.filter(function (message) {\n        return message.title.toLowerCase().includes(searchText);\n      }).map(function (message) {\n        return __jsx(MessagesListEl, _extends({\n          key: message._id\n        }, message, {\n          matchUrl: _this2.props.router.asPath,\n          onToggle: _this2.props.messageToggle,\n          onRemove: _this2.props.messageRemove\n        }));\n      });\n      return __jsx(Fragment, null, __jsx(\"h1\", null, \"Messages\"), __jsx(\"p\", null, \"There are \", this.props.messages.length, \" messages in your box\"), __jsx(\"div\", {\n        className: \"form-group\"\n      }, __jsx(\"input\", {\n        className: \"form-control\",\n        placeholder: \"Search for...\",\n        onChange: this.findMessage,\n        ref: \"search\"\n      })), __jsx(\"div\", {\n        className: \"list-group\"\n      }, messagesList));\n    }\n  }]);\n\n  return MessagesList;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    messages: state.messages.data\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    messageToggle: function messageToggle(id) {\n      return dispatch(actions.messageToggle(id));\n    },\n    messageRemove: function messageRemove(id) {\n      return dispatch(actions.messageRemove(id));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(MessagesList));","map":{"version":3,"sources":["/Users/binduraj/Documents/GitHub/dollarbank/web_Next/components/components/Messages/List/index.js"],"names":["React","Component","Fragment","connect","withRouter","actions","MessagesListEl","MessagesList","props","setState","search","refs","value","state","searchText","toLowerCase","messagesList","messages","filter","message","title","includes","map","_id","router","asPath","messageToggle","messageRemove","length","findMessage","mapStateToProps","data","mapDispatchToProps","dispatch","id"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAAQC,UAAR,QAAyB,aAAzB;AACA,OAAO,KAAKC,OAAZ,MAAyB,SAAzB;AACA,OAAOC,cAAP,MAA2B,gBAA3B;;IAEMC,Y;;;;;AACH,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AAChB,8BAAMA,KAAN;;AADgB,kEAQL,YAAM;AACjB,YAAKC,QAAL,CAAc;AAAEC,QAAAA,MAAM,EAAE,MAAKC,IAAL,CAAUD,MAAV,CAAiBE;AAA3B,OAAd;AACF,KAVkB;;AAGhB,UAAKC,KAAL,GAAa;AACVH,MAAAA,MAAM,EAAE;AADE,KAAb;AAHgB;AAMlB;;;;6BAMQ;AAAA;;AACN;AACA;AACA,UAAMI,UAAU,GAAG,KAAKD,KAAL,CAAWH,MAAX,CAAkBK,WAAlB,EAAnB;AACA,UAAMC,YAAY,GAAG,KAAKR,KAAL,CAAWS,QAAX,CACjBC,MADiB,CACV,UAAAC,OAAO;AAAA,eAAIA,OAAO,CAACC,KAAR,CAAcL,WAAd,GAA4BM,QAA5B,CAAqCP,UAArC,CAAJ;AAAA,OADG,EAEjBQ,GAFiB,CAEb,UAAAH,OAAO;AAAA,eACT,MAAC,cAAD;AACG,UAAA,GAAG,EAAEA,OAAO,CAACI;AADhB,WAEOJ,OAFP;AAGG,UAAA,QAAQ,EAAE,MAAI,CAACX,KAAL,CAAWgB,MAAX,CAAkBC,MAH/B;AAIG,UAAA,QAAQ,EAAE,MAAI,CAACjB,KAAL,CAAWkB,aAJxB;AAKG,UAAA,QAAQ,EAAE,MAAI,CAAClB,KAAL,CAAWmB;AALxB,WADS;AAAA,OAFM,CAArB;AAYA,aACG,MAAC,QAAD,QACG,6BADH,EAGG,+BAAc,KAAKnB,KAAL,CAAWS,QAAX,CAAoBW,MAAlC,0BAHH,EAKG;AAAK,QAAA,SAAS,EAAC;AAAf,SACG;AACG,QAAA,SAAS,EAAC,cADb;AAEG,QAAA,WAAW,EAAC,eAFf;AAGG,QAAA,QAAQ,EAAE,KAAKC,WAHlB;AAIG,QAAA,GAAG,EAAC;AAJP,QADH,CALH,EAcG;AAAK,QAAA,SAAS,EAAC;AAAf,SAA6Bb,YAA7B,CAdH,CADH;AAkBF;;;;EA/CuBf,S;;AAkD3B,IAAM6B,eAAe,GAAG,SAAlBA,eAAkB,CAAAjB,KAAK,EAAI;AAC9B,SAAO;AACJI,IAAAA,QAAQ,EAAEJ,KAAK,CAACI,QAAN,CAAec;AADrB,GAAP;AAGF,CAJD;;AAMA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ,EAAI;AACpC,SAAO;AACJP,IAAAA,aAAa,EAAE,uBAAAQ,EAAE;AAAA,aAAID,QAAQ,CAAC5B,OAAO,CAACqB,aAAR,CAAsBQ,EAAtB,CAAD,CAAZ;AAAA,KADb;AAEJP,IAAAA,aAAa,EAAE,uBAAAO,EAAE;AAAA,aAAID,QAAQ,CAAC5B,OAAO,CAACsB,aAAR,CAAsBO,EAAtB,CAAD,CAAZ;AAAA;AAFb,GAAP;AAIF,CALD;;AAOA,eAAe/B,OAAO,CACnB2B,eADmB,EAEnBE,kBAFmB,CAAP,CAGb5B,UAAU,CAACG,YAAD,CAHG,CAAf","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport {withRouter} from 'next/router';\nimport * as actions from 'actions';\nimport MessagesListEl from '../ListElement';\n\nclass MessagesList extends Component {\n   constructor(props) {\n      super(props);\n\n      this.state = {\n         search: ''\n      };\n   }\n\n   findMessage = () => {\n      this.setState({ search: this.refs.search.value });\n   };\n\n   render() {\n      // Messages\n      // Allow search by message title\n      const searchText = this.state.search.toLowerCase();\n      const messagesList = this.props.messages\n         .filter(message => message.title.toLowerCase().includes(searchText))\n         .map(message => (\n            <MessagesListEl\n               key={message._id}\n               {...message}\n               matchUrl={this.props.router.asPath}\n               onToggle={this.props.messageToggle}\n               onRemove={this.props.messageRemove}\n            />\n         ));\n\n      return (\n         <Fragment>\n            <h1>Messages</h1>\n\n            <p>There are {this.props.messages.length} messages in your box</p>\n\n            <div className=\"form-group\">\n               <input\n                  className=\"form-control\"\n                  placeholder=\"Search for...\"\n                  onChange={this.findMessage}\n                  ref=\"search\"\n               />\n            </div>\n\n            <div className=\"list-group\">{messagesList}</div>\n         </Fragment>\n      );\n   }\n}\n\nconst mapStateToProps = state => {\n   return {\n      messages: state.messages.data\n   };\n};\n\nconst mapDispatchToProps = dispatch => {\n   return {\n      messageToggle: id => dispatch(actions.messageToggle(id)),\n      messageRemove: id => dispatch(actions.messageRemove(id))\n   };\n};\n\nexport default connect(\n   mapStateToProps,\n   mapDispatchToProps\n)(withRouter(MessagesList));\n"]},"metadata":{},"sourceType":"module"}