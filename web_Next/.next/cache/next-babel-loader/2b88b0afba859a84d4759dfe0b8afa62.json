{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { updateAPIConfig } from 'api/base';\nimport { loginUser, registerUser } from 'api/auth';\nimport * as actionTypes from './actionTypes'; // Tools\n\nimport { setAuthToken } from 'tools';\nexport var setAuthStatus = function setAuthStatus(status) {\n  var email = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return {\n    type: actionTypes.SET_AUTH_STATUS,\n    status: status,\n    email: email\n  };\n}; // Login\n\nexport var login = function login(data) {\n  return function _callee(dispatch) {\n    var token;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(loginUser(data));\n\n          case 3:\n            token = _context.sent;\n\n            if (token) {\n              _context.next = 7;\n              break;\n            }\n\n            dispatch(setAuthStatus(false));\n            return _context.abrupt(\"return\");\n\n          case 7:\n            setAuthToken(token);\n            updateAPIConfig({\n              authToken: token\n            });\n            dispatch(setAuthStatus(true));\n            _context.next = 15;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](0);\n            dispatch(setAuthStatus(false));\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 12]], Promise);\n  };\n}; // Register\n\nexport var register = function register(data) {\n  return function _callee2(dispatch) {\n    var user;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(registerUser(data));\n\n          case 3:\n            user = _context2.sent;\n\n            if (user) {\n              _context2.next = 7;\n              break;\n            }\n\n            dispatch(setAuthStatus(false));\n            return _context2.abrupt(\"return\");\n\n          case 7:\n            dispatch(setAuthStatus(true));\n            _context2.next = 13;\n            break;\n\n          case 10:\n            _context2.prev = 10;\n            _context2.t0 = _context2[\"catch\"](0);\n            dispatch(setAuthStatus(false));\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 10]], Promise);\n  };\n};","map":{"version":3,"sources":["/Users/binduraj/Documents/GitHub/dollarbank/web_Next/helper/actions/auth.js"],"names":["updateAPIConfig","loginUser","registerUser","actionTypes","setAuthToken","setAuthStatus","status","email","type","SET_AUTH_STATUS","login","data","dispatch","token","authToken","register","user"],"mappings":";AAAA,SAASA,eAAT,QAAgC,UAAhC;AACA,SAASC,SAAT,EAAoBC,YAApB,QAAwC,UAAxC;AACA,OAAO,KAAKC,WAAZ,MAA6B,eAA7B,C,CAEA;;AACA,SAASC,YAAT,QAA6B,OAA7B;AAEA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,MAAD;AAAA,MAASC,KAAT,uEAAiB,IAAjB;AAAA,SAA2B;AACrDC,IAAAA,IAAI,EAAEL,WAAW,CAACM,eADmC;AAErDH,IAAAA,MAAM,EAANA,MAFqD;AAGrDC,IAAAA,KAAK,EAALA;AAHqD,GAA3B;AAAA,CAAtB,C,CAMP;;AACA,OAAO,IAAMG,KAAK,GAAG,SAARA,KAAQ,CAAAC,IAAI;AAAA,SAAI,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEHX,SAAS,CAACU,IAAD,CAFN;;AAAA;AAEjBE,YAAAA,KAFiB;;AAAA,gBAIlBA,KAJkB;AAAA;AAAA;AAAA;;AAKpBD,YAAAA,QAAQ,CAACP,aAAa,CAAC,KAAD,CAAd,CAAR;AALoB;;AAAA;AASvBD,YAAAA,YAAY,CAACS,KAAD,CAAZ;AACAb,YAAAA,eAAe,CAAC;AAAEc,cAAAA,SAAS,EAAED;AAAb,aAAD,CAAf;AACAD,YAAAA,QAAQ,CAACP,aAAa,CAAC,IAAD,CAAd,CAAR;AAXuB;AAAA;;AAAA;AAAA;AAAA;AAavBO,YAAAA,QAAQ,CAACP,aAAa,CAAC,KAAD,CAAd,CAAR;;AAbuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAJ;AAAA,CAAlB,C,CAiBP;;AACA,OAAO,IAAMU,QAAQ,GAAG,SAAXA,QAAW,CAAAJ,IAAI;AAAA,SAAI,kBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEPV,YAAY,CAACS,IAAD,CAFL;;AAAA;AAEpBK,YAAAA,IAFoB;;AAAA,gBAIrBA,IAJqB;AAAA;AAAA;AAAA;;AAKvBJ,YAAAA,QAAQ,CAACP,aAAa,CAAC,KAAD,CAAd,CAAR;AALuB;;AAAA;AAS1BO,YAAAA,QAAQ,CAACP,aAAa,CAAC,IAAD,CAAd,CAAR;AAT0B;AAAA;;AAAA;AAAA;AAAA;AAW1BO,YAAAA,QAAQ,CAACP,aAAa,CAAC,KAAD,CAAd,CAAR;;AAX0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAJ;AAAA,CAArB","sourcesContent":["import { updateAPIConfig } from 'api/base';\nimport { loginUser, registerUser } from 'api/auth';\nimport * as actionTypes from './actionTypes';\n\n// Tools\nimport { setAuthToken } from 'tools';\n\nexport const setAuthStatus = (status, email = null) => ({\n   type: actionTypes.SET_AUTH_STATUS,\n   status,\n   email\n});\n\n// Login\nexport const login = data => async dispatch => {\n   try {\n      const token = await loginUser(data);\n\n      if (!token) {\n         dispatch(setAuthStatus(false));\n         return;\n      }\n\n      setAuthToken(token);\n      updateAPIConfig({ authToken: token });\n      dispatch(setAuthStatus(true));\n   } catch (err) {\n      dispatch(setAuthStatus(false));\n   }\n};\n\n// Register\nexport const register = data => async dispatch => {\n   try {\n      const user = await registerUser(data);\n\n      if (!user) {\n         dispatch(setAuthStatus(false));\n         return;\n      }\n\n      dispatch(setAuthStatus(true));\n   } catch (err) {\n      dispatch(setAuthStatus(false));\n   }\n};\n"]},"metadata":{},"sourceType":"module"}