{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { Form, Field, withFormik } from 'formik';\nimport Link from 'next/link';\nimport * as Yup from 'yup';\nimport SingleModuleButton from 'components/UI/Buttons/SingleModuleButton';\n\nvar InnerForm = function InnerForm(props) {\n  var errors = props.errors,\n      touched = props.touched;\n  return __jsx(Form, {\n    className: \"login-form\"\n  }, __jsx(\"div\", null, __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(Field, {\n    type: \"email\",\n    className: \"form-control login-input\",\n    name: \"email\",\n    placeholder: \"Your email...\"\n  }), touched.email && errors.email && __jsx(\"p\", {\n    className: \"field-invalid\"\n  }, errors.email)), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(Field, {\n    type: \"password\",\n    className: \"form-control password-input\",\n    name: \"password\",\n    placeholder: \"Your password...\"\n  }), touched.password && errors.password && __jsx(\"p\", {\n    className: \"field-invalid\"\n  }, errors.password)), __jsx(\"div\", {\n    className: \"checkbox\"\n  }, __jsx(\"label\", null, __jsx(Field, {\n    type: \"checkbox\",\n    name: \"remember\"\n  }), \"Keep me signed in\")), __jsx(\"p\", null, __jsx(Link, {\n    href: \"/register\"\n  }, __jsx(\"a\", null, \"Don't have an account?\")))), __jsx(SingleModuleButton, {\n    text: \"Log in now\",\n    type: \"submit\"\n  }));\n}; // Wrap our form with the using withFormik HoC\n\n\nvar LoginForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: function mapPropsToValues(props) {\n    return {\n      email: '',\n      password: ''\n    };\n  },\n  // Add a custom validation function (this can be async too!)\n  validationSchema: Yup.object().shape({\n    email: Yup.string().required('Email is required').email('This is not a valid email'),\n    password: Yup.string().required('Password is required').min(6, 'Your password has to be at least 6 characters')\n  }),\n  // Submission handler\n  handleSubmit: function handleSubmit(values, _ref) {\n    var props = _ref.props,\n        setStatus = _ref.setStatus;\n    props.onLoginSubmit(values.email, values.password);\n  }\n})(InnerForm);\nexport default LoginForm;","map":{"version":3,"sources":["/Users/binduraj/Documents/GitHub/dollarbank/web_Next/components/components/Auth/Login/Form.js"],"names":["React","Form","Field","withFormik","Link","Yup","SingleModuleButton","InnerForm","props","errors","touched","email","password","LoginForm","mapPropsToValues","validationSchema","object","shape","string","required","min","handleSubmit","values","setStatus","onLoginSubmit"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,UAAtB,QAAwC,QAAxC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,kBAAP,MAA+B,0CAA/B;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,KAAK,EAAI;AAAA,MAChBC,MADgB,GACID,KADJ,CAChBC,MADgB;AAAA,MACRC,OADQ,GACIF,KADJ,CACRE,OADQ;AAGxB,SACG,MAAC,IAAD;AAAM,IAAA,SAAS,EAAC;AAAhB,KACG,mBACG;AAAK,IAAA,SAAS,EAAC;AAAf,KACG,MAAC,KAAD;AACG,IAAA,IAAI,EAAC,OADR;AAEG,IAAA,SAAS,EAAC,0BAFb;AAGG,IAAA,IAAI,EAAC,OAHR;AAIG,IAAA,WAAW,EAAC;AAJf,IADH,EAOIA,OAAO,CAACC,KAAR,IAAiBF,MAAM,CAACE,KAAxB,IAAiC;AAAG,IAAA,SAAS,EAAC;AAAb,KAA8BF,MAAM,CAACE,KAArC,CAPrC,CADH,EAWG;AAAK,IAAA,SAAS,EAAC;AAAf,KACG,MAAC,KAAD;AACG,IAAA,IAAI,EAAC,UADR;AAEG,IAAA,SAAS,EAAC,6BAFb;AAGG,IAAA,IAAI,EAAC,UAHR;AAIG,IAAA,WAAW,EAAC;AAJf,IADH,EAOID,OAAO,CAACE,QAAR,IAAoBH,MAAM,CAACG,QAA3B,IACE;AAAG,IAAA,SAAS,EAAC;AAAb,KAA8BH,MAAM,CAACG,QAArC,CARN,CAXH,EAuBG;AAAK,IAAA,SAAS,EAAC;AAAf,KACG,qBACG,MAAC,KAAD;AAAO,IAAA,IAAI,EAAC,UAAZ;AAAuB,IAAA,IAAI,EAAC;AAA5B,IADH,sBADH,CAvBH,EA8BG,iBACG,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC;AAAX,KACI,0CADJ,CADH,CA9BH,CADH,EAsCG,MAAC,kBAAD;AAAoB,IAAA,IAAI,EAAC,YAAzB;AAAsC,IAAA,IAAI,EAAC;AAA3C,IAtCH,CADH;AA0CF,CA7CD,C,CA+CA;;;AACA,IAAMC,SAAS,GAAGV,UAAU,CAAC;AAC1B;AACAW,EAAAA,gBAAgB,EAAE,0BAAAN,KAAK;AAAA,WAAK;AAAEG,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,QAAQ,EAAE;AAAvB,KAAL;AAAA,GAFG;AAI1B;AACAG,EAAAA,gBAAgB,EAAEV,GAAG,CAACW,MAAJ,GAAaC,KAAb,CAAmB;AAClCN,IAAAA,KAAK,EAAEN,GAAG,CAACa,MAAJ,GACHC,QADG,CACM,mBADN,EAEHR,KAFG,CAEG,2BAFH,CAD2B;AAIlCC,IAAAA,QAAQ,EAAEP,GAAG,CAACa,MAAJ,GACNC,QADM,CACG,sBADH,EAENC,GAFM,CAEF,CAFE,EAEC,+CAFD;AAJwB,GAAnB,CALQ;AAc1B;AACAC,EAAAA,YAAY,EAAE,sBAACC,MAAD,QAAkC;AAAA,QAAvBd,KAAuB,QAAvBA,KAAuB;AAAA,QAAhBe,SAAgB,QAAhBA,SAAgB;AAC7Cf,IAAAA,KAAK,CAACgB,aAAN,CAAoBF,MAAM,CAACX,KAA3B,EAAkCW,MAAM,CAACV,QAAzC;AACF;AAjByB,CAAD,CAAV,CAkBfL,SAlBe,CAAlB;AAoBA,eAAeM,SAAf","sourcesContent":["import React from 'react';\nimport { Form, Field, withFormik } from 'formik';\nimport Link from 'next/link';\nimport * as Yup from 'yup';\nimport SingleModuleButton from 'components/UI/Buttons/SingleModuleButton';\n\nconst InnerForm = props => {\n   const { errors, touched } = props;\n\n   return (\n      <Form className=\"login-form\">\n         <div>\n            <div className=\"form-group\">\n               <Field\n                  type=\"email\"\n                  className=\"form-control login-input\"\n                  name=\"email\"\n                  placeholder=\"Your email...\"\n               />\n               {touched.email && errors.email && <p className=\"field-invalid\">{errors.email}</p>}\n            </div>\n\n            <div className=\"form-group\">\n               <Field\n                  type=\"password\"\n                  className=\"form-control password-input\"\n                  name=\"password\"\n                  placeholder=\"Your password...\"\n               />\n               {touched.password && errors.password && (\n                  <p className=\"field-invalid\">{errors.password}</p>\n               )}\n            </div>\n\n            <div className=\"checkbox\">\n               <label>\n                  <Field type=\"checkbox\" name=\"remember\" />\n                  Keep me signed in\n               </label>\n            </div>\n\n            <p>\n               <Link href=\"/register\">\n                   <a>Don't have an account?</a>\n               </Link>\n            </p>\n         </div>\n\n         <SingleModuleButton text=\"Log in now\" type=\"submit\" />\n      </Form>\n   );\n};\n\n// Wrap our form with the using withFormik HoC\nconst LoginForm = withFormik({\n   // Transform outer props into form values\n   mapPropsToValues: props => ({ email: '', password: '' }),\n\n   // Add a custom validation function (this can be async too!)\n   validationSchema: Yup.object().shape({\n      email: Yup.string()\n         .required('Email is required')\n         .email('This is not a valid email'),\n      password: Yup.string()\n         .required('Password is required')\n         .min(6, 'Your password has to be at least 6 characters')\n   }),\n\n   // Submission handler\n   handleSubmit: (values, { props, setStatus }) => {\n      props.onLoginSubmit(values.email, values.password);\n   }\n})(InnerForm);\n\nexport default LoginForm;\n"]},"metadata":{},"sourceType":"module"}