{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nconst BASE_URL = 'http://localhost:3001';\nlet config = {\n  authToken: ''\n};\nexport const getAPIConfig = () => _objectSpread({}, config);\nexport const updateAPIConfig = newConfig => {\n  config = _objectSpread({}, config, {}, newConfig);\n};\nexport const callAPI = (endpoint, method = 'get', data) => {\n  return new Promise((resolve, reject) => {\n    axios({\n      method,\n      headers: {\n        Authorization: `Bearer ${getAPIConfig().authToken}`\n      },\n      url: `${BASE_URL}${endpoint}`,\n      data\n    }).then(res => resolve(res.data)).catch(err => {\n      reject({\n        status: err.response && err.response.status || '',\n        message: err.message || ''\n      });\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"module"}