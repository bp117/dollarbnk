{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { withRouter } from 'next/router';\nimport { Link } from 'routes';\nimport React, { Children } from 'react';\n\nconst ActiveLink = (_ref) => {\n  let {\n    router,\n    children\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"router\", \"children\"]);\n\n  const child = Children.only(children);\n  const activeClassName = props.activeClassName || 'active';\n  let className = child.props.className || '';\n\n  if (router.asPath === props.href && activeClassName) {\n    className = `${className} ${activeClassName}`.trim();\n  }\n\n  const route = props.href;\n  delete props.activeClassName;\n  delete props.href;\n  return __jsx(Link, _objectSpread({}, props, {\n    route\n  }), React.cloneElement(child, {\n    className\n  }));\n};\n\nexport default withRouter(ActiveLink);","map":{"version":3,"sources":["/Users/binduraj/Documents/GitHub/dollarbank/web_Next/components/containers/ActiveLink/index.js"],"names":["withRouter","Link","React","Children","ActiveLink","router","children","props","child","only","activeClassName","className","asPath","href","trim","route","cloneElement"],"mappings":";;;;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,aAA3B;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,MAAMC,UAAU,GAAG,UAAoC;AAAA,MAAnC;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAmC;AAAA,MAAZC,KAAY;;AACnD,QAAMC,KAAK,GAAGL,QAAQ,CAACM,IAAT,CAAcH,QAAd,CAAd;AACA,QAAMI,eAAe,GAAGH,KAAK,CAACG,eAAN,IAAyB,QAAjD;AAEA,MAAIC,SAAS,GAAGH,KAAK,CAACD,KAAN,CAAYI,SAAZ,IAAyB,EAAzC;;AACA,MAAIN,MAAM,CAACO,MAAP,KAAkBL,KAAK,CAACM,IAAxB,IAAgCH,eAApC,EAAqD;AACjDC,IAAAA,SAAS,GAAI,GAAEA,SAAU,IAAGD,eAAgB,EAAhC,CAAkCI,IAAlC,EAAZ;AACH;;AAED,QAAMC,KAAK,GAAGR,KAAK,CAACM,IAApB;AAEA,SAAON,KAAK,CAACG,eAAb;AACA,SAAOH,KAAK,CAACM,IAAb;AAEA,SAAO,MAAC,IAAD,oBAAeN,KAAf;AAAsBQ,IAAAA;AAAtB,MAA+Bb,KAAK,CAACc,YAAN,CAAmBR,KAAnB,EAA0B;AAAEG,IAAAA;AAAF,GAA1B,CAA/B,CAAP;AACH,CAfD;;AAiBA,eAAeX,UAAU,CAACI,UAAD,CAAzB","sourcesContent":["import { withRouter } from 'next/router';\nimport { Link } from 'routes'\nimport React, { Children } from 'react';\n\nconst ActiveLink = ({ router, children, ...props }) => {\n    const child = Children.only(children);\n    const activeClassName = props.activeClassName || 'active'\n\n    let className = child.props.className || '';\n    if (router.asPath === props.href && activeClassName) {\n        className = `${className} ${activeClassName}`.trim();\n    }\n\n    const route = props.href\n\n    delete props.activeClassName;\n    delete props.href\n\n    return <Link {...{ ...props, route}}>{React.cloneElement(child, { className })}</Link>;\n};\n\nexport default withRouter(ActiveLink);"]},"metadata":{},"sourceType":"module"}