{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport axios from 'axios';\nvar BASE_URL = 'http://localhost:3001';\nvar config = {\n  authToken: ''\n};\nexport var getAPIConfig = function getAPIConfig() {\n  return _objectSpread({}, config);\n};\nexport var updateAPIConfig = function updateAPIConfig(newConfig) {\n  config = _objectSpread({}, config, {}, newConfig);\n};\nexport var callAPI = function callAPI(endpoint) {\n  var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'get';\n  var data = arguments.length > 2 ? arguments[2] : undefined;\n  return new Promise(function (resolve, reject) {\n    axios({\n      method: method,\n      headers: {\n        Authorization: \"Bearer \".concat(getAPIConfig().authToken)\n      },\n      url: \"\".concat(BASE_URL).concat(endpoint),\n      data: data\n    }).then(function (res) {\n      return resolve(res.data);\n    })[\"catch\"](function (err) {\n      reject({\n        status: err.response && err.response.status || '',\n        message: err.message || ''\n      });\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"module"}