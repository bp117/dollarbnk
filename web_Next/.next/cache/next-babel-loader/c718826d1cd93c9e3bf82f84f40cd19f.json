{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _ from 'lodash';\nimport { getMyself, updateMyself } from 'api/users';\nimport * as actionTypes from './actionTypes'; // Get myself\n\nexport var getProfile = function getProfile() {\n  return function _callee(dispatch) {\n    var data;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(getMyself());\n\n          case 3:\n            data = _context.sent;\n\n            if (data) {\n              _context.next = 7;\n              break;\n            }\n\n            dispatch(fetchProfileStatus(false));\n            return _context.abrupt(\"return\");\n\n          case 7:\n            dispatch({\n              type: actionTypes.FETCH_PROFILE,\n              data: data\n            });\n            _context.next = 13;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            throw new Error('Accounts fetch failed');\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 10]], Promise);\n  };\n}; // Status\n\nexport var fetchProfileStatus = function fetchProfileStatus(status) {\n  return {\n    type: actionTypes.FETCH_PROFILE_STATUS,\n    status: status\n  };\n}; // Change user's details\n\nexport var changeUserDetails = function changeUserDetails() {\n  var email = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var password = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var phone = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return function _callee2(dispatch) {\n    var data, user;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            data = {};\n\n            if (email) {\n              data.email = email;\n            }\n\n            if (password) {\n              data.password = password;\n            }\n\n            if (phone) {\n              data.phone = phone;\n            }\n\n            if (_.isEmpty(data)) {\n              _context2.next = 13;\n              break;\n            }\n\n            _context2.next = 8;\n            return _regeneratorRuntime.awrap(updateMyself(data));\n\n          case 8:\n            user = _context2.sent;\n\n            if (user) {\n              _context2.next = 12;\n              break;\n            }\n\n            dispatch(fetchProfileStatus(false));\n            return _context2.abrupt(\"return\");\n\n          case 12:\n            dispatch({\n              type: actionTypes.USER_CHANGE_DETAILS\n            });\n\n          case 13:\n            _context2.next = 18;\n            break;\n\n          case 15:\n            _context2.prev = 15;\n            _context2.t0 = _context2[\"catch\"](0);\n            dispatch(fetchProfileStatus(false));\n\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 15]], Promise);\n  };\n};","map":{"version":3,"sources":["/Users/binduraj/Documents/GitHub/dollarbank/web_Next/helper/actions/profile.js"],"names":["_","getMyself","updateMyself","actionTypes","getProfile","dispatch","data","fetchProfileStatus","type","FETCH_PROFILE","Error","status","FETCH_PROFILE_STATUS","changeUserDetails","email","password","phone","isEmpty","user","USER_CHANGE_DETAILS"],"mappings":";AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,SAASC,SAAT,EAAoBC,YAApB,QAAwC,WAAxC;AACA,OAAO,KAAKC,WAAZ,MAA6B,eAA7B,C,CAEA;;AACA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEPJ,SAAS,EAFF;;AAAA;AAEpBK,YAAAA,IAFoB;;AAAA,gBAIrBA,IAJqB;AAAA;AAAA;AAAA;;AAKvBD,YAAAA,QAAQ,CAACE,kBAAkB,CAAC,KAAD,CAAnB,CAAR;AALuB;;AAAA;AAS1BF,YAAAA,QAAQ,CAAC;AAAEG,cAAAA,IAAI,EAAEL,WAAW,CAACM,aAApB;AAAmCH,cAAAA,IAAI,EAAJA;AAAnC,aAAD,CAAR;AAT0B;AAAA;;AAAA;AAAA;AAAA;AAAA,kBAWpB,IAAII,KAAJ,CAAU,uBAAV,CAXoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAN;AAAA,CAAnB,C,CAeP;;AACA,OAAO,IAAMH,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAI,MAAM;AAAA,SAAK;AAC1CH,IAAAA,IAAI,EAAEL,WAAW,CAACS,oBADwB;AAE1CD,IAAAA,MAAM,EAANA;AAF0C,GAAL;AAAA,CAAjC,C,CAKP;;AACA,OAAO,IAAME,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA,MAC9BC,KAD8B,uEACtB,IADsB;AAAA,MAE9BC,QAF8B,uEAEnB,IAFmB;AAAA,MAG9BC,KAH8B,uEAGtB,IAHsB;AAAA,SAI5B,kBAAMX,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEOC,YAAAA,IAFP,GAEc,EAFd;;AAIC,gBAAIQ,KAAJ,EAAW;AACRR,cAAAA,IAAI,CAACQ,KAAL,GAAaA,KAAb;AACF;;AAED,gBAAIC,QAAJ,EAAc;AACXT,cAAAA,IAAI,CAACS,QAAL,GAAgBA,QAAhB;AACF;;AAED,gBAAIC,KAAJ,EAAW;AACRV,cAAAA,IAAI,CAACU,KAAL,GAAaA,KAAb;AACF;;AAdF,gBAgBMhB,CAAC,CAACiB,OAAF,CAAUX,IAAV,CAhBN;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAiBuBJ,YAAY,CAACI,IAAD,CAjBnC;;AAAA;AAiBUY,YAAAA,IAjBV;;AAAA,gBAmBSA,IAnBT;AAAA;AAAA;AAAA;;AAoBOb,YAAAA,QAAQ,CAACE,kBAAkB,CAAC,KAAD,CAAnB,CAAR;AApBP;;AAAA;AAwBIF,YAAAA,QAAQ,CAAC;AACNG,cAAAA,IAAI,EAAEL,WAAW,CAACgB;AADZ,aAAD,CAAR;;AAxBJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AA6BCd,YAAAA,QAAQ,CAACE,kBAAkB,CAAC,KAAD,CAAnB,CAAR;;AA7BD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAJ4B;AAAA,CAA1B","sourcesContent":["import _ from 'lodash';\nimport { getMyself, updateMyself } from 'api/users';\nimport * as actionTypes from './actionTypes';\n\n// Get myself\nexport const getProfile = () => async dispatch => {\n   try {\n      const data = await getMyself();\n\n      if (!data) {\n         dispatch(fetchProfileStatus(false));\n         return;\n      }\n\n      dispatch({ type: actionTypes.FETCH_PROFILE, data });\n   } catch (err) {\n      throw new Error('Accounts fetch failed');\n   }\n};\n\n// Status\nexport const fetchProfileStatus = status => ({\n   type: actionTypes.FETCH_PROFILE_STATUS,\n   status\n});\n\n// Change user's details\nexport const changeUserDetails = (\n   email = null,\n   password = null,\n   phone = null\n) => async dispatch => {\n   try {\n      const data = {};\n\n      if (email) {\n         data.email = email;\n      }\n\n      if (password) {\n         data.password = password;\n      }\n\n      if (phone) {\n         data.phone = phone;\n      }\n\n      if (!_.isEmpty(data)) {\n         const user = await updateMyself(data);\n\n         if (!user) {\n            dispatch(fetchProfileStatus(false));\n            return;\n         }\n\n         dispatch({\n            type: actionTypes.USER_CHANGE_DETAILS\n         });\n      }\n   } catch (err) {\n      dispatch(fetchProfileStatus(false));\n   }\n};\n"]},"metadata":{},"sourceType":"module"}