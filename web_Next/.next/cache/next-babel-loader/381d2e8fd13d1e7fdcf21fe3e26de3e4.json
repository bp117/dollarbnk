{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport PageContainer from 'hoc/PageContainer';\nimport axios from 'axios';\nimport Loader from 'components/UI/Loader';\nimport Header from 'components/CurrencyStats/Header';\nimport CurrencySettings from 'components/CurrencyStats/CurrencySettings';\nimport CurrencyList from 'components/CurrencyStats/List';\nimport SingleButton from 'components/UI/Buttons/SingleButton';\nimport subDays from 'date-fns/subDays';\nimport format from 'date-fns/format';\nimport 'containers/CurrencyStats/style.scss';\nconst initData = {\n  currencies: 'GBP,AUD,CAD,CHF,CZK,EUR,HUF,JPY,NOK,PLN,RUB,SEK,USD'.split(','),\n  baseCurrency: 'GBP',\n  date: subDays(new Date(), 1)\n};\n\nclass CurrenciesPage extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", _objectSpread({}, initData, {\n      currencyData: [],\n      loaded: false\n    }));\n\n    _defineProperty(this, \"onBaseCurrencyChange\", baseCurrency => {\n      this.setState({\n        baseCurrency,\n        loaded: false\n      }, () => {\n        this.makeAPIRequest();\n      });\n    });\n\n    _defineProperty(this, \"onCurrencyDateChange\", date => {\n      this.setState({\n        date,\n        loaded: false\n      }, () => {\n        this.makeAPIRequest();\n      });\n    });\n  }\n\n  static async getInitialProps() {\n    const currencyData = await getCurrencyData(_objectSpread({}, initData));\n    return _objectSpread({}, initData, {\n      currencyData,\n      loaded: true\n    });\n  }\n\n  render() {\n    const data = this.state.browser ? this.state : _objectSpread({}, this.props, {\n      date: subDays(new Date(), 1)\n    });\n\n    if (this.state.browser && !this.state.loaded) {\n      return __jsx(Loader, null);\n    } else {\n      return __jsx(PageContainer, null, __jsx(\"div\", {\n        className: \"row\"\n      }, __jsx(\"div\", {\n        className: \"col\"\n      }, __jsx(\"section\", {\n        className: \"module container-module currency-stats\"\n      }, __jsx(\"div\", {\n        className: \"currency-stats-header text-center\"\n      }, __jsx(Header, null), __jsx(CurrencySettings, {\n        date: data.date,\n        currencies: data.currencies,\n        baseCurrency: data.baseCurrency,\n        onBaseCurrencyChange: this.onBaseCurrencyChange,\n        onCurrencyDateChange: this.onCurrencyDateChange\n      })), __jsx(CurrencyList, {\n        currencyData: data.currencyData,\n        baseCurrency: data.baseCurrency\n      }), __jsx(\"div\", {\n        className: \"currency-stats-leave-section\"\n      }, __jsx(SingleButton, {\n        text: \"Go back to home page \\xBB\",\n        href: \"/\",\n        size: \"lg\"\n      }))))));\n    }\n  }\n\n  makeAPIRequest() {\n    const {\n      currencies,\n      baseCurrency,\n      date\n    } = this.state;\n    getCurrencyData({\n      currencies,\n      baseCurrency,\n      date\n    }).then(currencyData => {\n      this.setState({\n        currencyData,\n        loaded: true,\n        browser: true\n      });\n    }).catch(() => this.setState({\n      loaded: 0\n    }));\n  }\n\n}\n\nfunction getCurrencyData({\n  currencies,\n  baseCurrency,\n  date\n}) {\n  return new Promise((resolve, reject) => {\n    // Remove baseCurrency from currencies list - it wouldn't make any sense\n    // Then, convert it from array to string (needed for API request)\n    const symbols = currencies.filter(curr => curr !== baseCurrency).join(',');\n    let apiParams = {\n      symbols,\n      base: baseCurrency\n    }; // If date is set - add it to request\n\n    if (date) {\n      apiParams.date = format(date, 'yyyy.MM.dd');\n    }\n\n    axios.get('https://api.exchangeratesapi.io/latest', {\n      params: apiParams\n    }).then(res => res.data).then(currencyData => {\n      resolve(currencyData);\n    }).catch(() => reject());\n  });\n}\n\nexport default CurrenciesPage;","map":null,"metadata":{},"sourceType":"module"}