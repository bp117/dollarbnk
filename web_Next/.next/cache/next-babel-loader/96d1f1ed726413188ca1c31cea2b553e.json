{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { Form, Field, withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport 'tools/validations/YupCustomValidations';\nimport SingleModuleButton from 'components/UI/Buttons/SingleModuleButton';\n\nvar InnerForm = function InnerForm(props) {\n  var errors = props.errors,\n      touched = props.touched;\n  return __jsx(Form, null, __jsx(\"div\", null, __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"pin\"\n  }, \"Enter new PIN\"), __jsx(Field, {\n    type: \"text\",\n    id: \"pin\",\n    className: \"form-control\",\n    name: \"pin\",\n    maxLength: \"4\",\n    placeholder: \"Enter new PIN...\"\n  }), touched.pin && errors.pin && __jsx(\"p\", {\n    className: \"field-invalid\"\n  }, errors.pin)), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"pin-conf\"\n  }, \"Confirm new PIN\"), __jsx(Field, {\n    type: \"text\",\n    id: \"pin-conf\",\n    className: \"form-control\",\n    name: \"pinConf\",\n    maxLength: \"4\",\n    placeholder: \"Confirm new PIN...\"\n  }), touched.pinConf && errors.pinConf && __jsx(\"p\", {\n    className: \"field-invalid\"\n  }, errors.pinConf)), __jsx(\"p\", {\n    className: \"validation-info\"\n  }, props.status)), __jsx(SingleModuleButton, {\n    text: \"Change PIN\",\n    type: \"submit\"\n  }));\n};\n\nvar PINChangeForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: function mapPropsToValues(props) {\n    return {\n      pin: '',\n      pinConf: ''\n    };\n  },\n  validationSchema: Yup.object().shape({\n    pin: Yup.number().typeError('PIN must be a number').positive('Please enter a positive number').integer('PIN must be an integer').length(4, 'PIN must be 4 numbers'),\n    pinConf: Yup.number() // When PIN has any value, activate pinConf validations\n    .when('pin', {\n      is: function is(val) {\n        return val && val.toString().length > 0;\n      },\n      then: Yup.number().required('Please confirm your PIN').typeError('PIN confirmation must be a number').oneOf([Yup.ref('pin')], 'PINs must be the same')\n    })\n  }),\n  // Submission handler\n  handleSubmit: function handleSubmit(values, _ref) {\n    var props = _ref.props,\n        setStatus = _ref.setStatus;\n    var pin = parseInt(values.pin, 10);\n\n    if (!pin) {\n      setStatus('No PIN changed');\n      return;\n    }\n\n    setStatus('Sending...');\n    props.changeCardPin(pin).then(function (data) {\n      return setStatus('PIN successfully changed!');\n    })[\"catch\"](function (error) {\n      return setStatus('Problems, try again...');\n    });\n  }\n})(InnerForm);\nexport default PINChangeForm;","map":null,"metadata":{},"sourceType":"module"}