{"ast":null,"code":"import format from 'date-fns/format';\nimport jwtDecode from 'jwt-decode';\nimport nextCookie from 'next-cookies';\nimport cookie from 'js-cookie';\nimport Router from 'next/router'; // Add padding from the start of the current string/number\n\nexport const myPadStart = (el, targetLength, padString) => {\n  return el.toString().padStart(targetLength, padString);\n}; // Insert something after every n characters in the string\n\nexport const chunker = (el, step, string) => {\n  const regExp = new RegExp(`.{${step}}`, 'g');\n  return el.toString().match(regExp).join(string);\n}; // Format date\n\nexport const formatDate = (date, dateFormat) => format(new Date(date), dateFormat); // Token checker\n\nexport const getAuthToken = () => {\n  return cookie.get('token');\n};\nexport const setAuthToken = token => {\n  cookie.set('token', token);\n};\nexport const removeAuthToken = () => {\n  cookie.remove('token');\n};\nexport const isValidToken = () => {\n  return new Promise((resolve, reject) => {\n    const token = checkValidToken();\n\n    if (token) {\n      resolve(token);\n    } else {\n      reject();\n    }\n  });\n};\nexport const checkValidToken = () => {\n  const currentTime = Date.now().valueOf() / 1000;\n  const token = getAuthToken();\n\n  if (!token) {\n    return;\n  }\n\n  const decodedToken = jwtDecode(token); // If token expired - remove it\n\n  if (decodedToken.exp < currentTime) {\n    removeAuthToken();\n    return;\n  }\n\n  return token;\n};\nexport const auth = ctx => {\n  const {\n    token\n  } = nextCookie(ctx),\n        {\n    pathname\n  } = ctx;\n\n  if (pathname === '/login') {\n    if (!token) {\n      return false;\n    }\n\n    if (true) {\n      ctx.res.writeHead(302, {\n        Location: '/panel'\n      });\n      ctx.res.end();\n    } else {\n      Router.push('/panel');\n    }\n  } // If there's no token, it means the user is not logged in.\n\n\n  if (!token) {\n    if (true) {\n      ctx.res.writeHead(302, {\n        Location: '/login'\n      });\n      ctx.res.end();\n    } else {\n      Router.push('/login');\n    }\n  }\n\n  return token;\n};","map":null,"metadata":{},"sourceType":"module"}