{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as actionTypes from 'actions/actionTypes';\nvar initialState = {\n  data: [],\n  status: true\n};\n\nvar cards = function cards() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var data;\n  var foundCard;\n\n  switch (action.type) {\n    case actionTypes.FETCH_CARDS:\n      return _objectSpread({}, state, {\n        data: _toConsumableArray(action.data),\n        status: true\n      });\n\n    case actionTypes.FETCH_CARDS_STATUS:\n      return _objectSpread({}, state, {\n        status: action.status\n      });\n\n    case actionTypes.CARD_CHANGE_PIN:\n      data = state.data;\n      foundCard = data.find(function (card) {\n        return card._id === action.id;\n      });\n      foundCard.pin = action.newPin;\n      return _objectSpread({}, state, {\n        data: _toConsumableArray(data)\n      });\n\n    case actionTypes.CARD_CHANGE_LIMITS:\n      data = state.data;\n      foundCard = data.find(function (card) {\n        return card._id === action.id;\n      });\n      var newOnlineLimit = action.dailyOnlineLimit;\n      var newWithdrawalLimit = action.dailyWithdrawalLimit;\n\n      if (newOnlineLimit) {\n        foundCard.dailyOnlineLimit = parseFloat(newOnlineLimit).toFixed(2);\n      }\n\n      if (newWithdrawalLimit) {\n        foundCard.dailyWithdrawalLimit = parseFloat(newWithdrawalLimit).toFixed(2);\n      }\n\n      return _objectSpread({}, state, {\n        data: _toConsumableArray(data)\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default cards;","map":{"version":3,"sources":["/Users/binduraj/Documents/GitHub/dollarbank/web_Next/helper/reducers/cards.js"],"names":["actionTypes","initialState","data","status","cards","state","action","foundCard","type","FETCH_CARDS","FETCH_CARDS_STATUS","CARD_CHANGE_PIN","find","card","_id","id","pin","newPin","CARD_CHANGE_LIMITS","newOnlineLimit","dailyOnlineLimit","newWithdrawalLimit","dailyWithdrawalLimit","parseFloat","toFixed"],"mappings":";;;;;;;AAAA,OAAO,KAAKA,WAAZ,MAA6B,qBAA7B;AAEA,IAAMC,YAAY,GAAG;AAClBC,EAAAA,IAAI,EAAE,EADY;AAElBC,EAAAA,MAAM,EAAE;AAFU,CAArB;;AAKA,IAAMC,KAAK,GAAG,SAARA,KAAQ,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBJ,YAAyB;AAAA,MAAXK,MAAW;AAC7C,MAAIJ,IAAJ;AACA,MAAIK,SAAJ;;AAEA,UAAQD,MAAM,CAACE,IAAf;AACG,SAAKR,WAAW,CAACS,WAAjB;AACG,+BACMJ,KADN;AAEGH,QAAAA,IAAI,qBAAMI,MAAM,CAACJ,IAAb,CAFP;AAGGC,QAAAA,MAAM,EAAE;AAHX;;AAMH,SAAKH,WAAW,CAACU,kBAAjB;AACG,+BACML,KADN;AAEGF,QAAAA,MAAM,EAAEG,MAAM,CAACH;AAFlB;;AAKH,SAAKH,WAAW,CAACW,eAAjB;AACGT,MAAAA,IAAI,GAAGG,KAAK,CAACH,IAAb;AACAK,MAAAA,SAAS,GAAGL,IAAI,CAACU,IAAL,CAAU,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACC,GAAL,KAAaR,MAAM,CAACS,EAAxB;AAAA,OAAd,CAAZ;AAEAR,MAAAA,SAAS,CAACS,GAAV,GAAgBV,MAAM,CAACW,MAAvB;AAEA,+BACMZ,KADN;AAEGH,QAAAA,IAAI,qBAAMA,IAAN;AAFP;;AAKH,SAAKF,WAAW,CAACkB,kBAAjB;AACGhB,MAAAA,IAAI,GAAGG,KAAK,CAACH,IAAb;AACAK,MAAAA,SAAS,GAAGL,IAAI,CAACU,IAAL,CAAU,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACC,GAAL,KAAaR,MAAM,CAACS,EAAxB;AAAA,OAAd,CAAZ;AAEA,UAAMI,cAAc,GAAGb,MAAM,CAACc,gBAA9B;AACA,UAAMC,kBAAkB,GAAGf,MAAM,CAACgB,oBAAlC;;AAEA,UAAIH,cAAJ,EAAoB;AACjBZ,QAAAA,SAAS,CAACa,gBAAV,GAA6BG,UAAU,CAACJ,cAAD,CAAV,CAA2BK,OAA3B,CAAmC,CAAnC,CAA7B;AACF;;AAED,UAAIH,kBAAJ,EAAwB;AACrBd,QAAAA,SAAS,CAACe,oBAAV,GAAiCC,UAAU,CAACF,kBAAD,CAAV,CAA+BG,OAA/B,CAAuC,CAAvC,CAAjC;AACF;;AAED,+BACMnB,KADN;AAEGH,QAAAA,IAAI,qBAAMA,IAAN;AAFP;;AAKH;AACG,aAAOG,KAAP;AA9CN;AAgDF,CApDD;;AAsDA,eAAeD,KAAf","sourcesContent":["import * as actionTypes from 'actions/actionTypes';\n\nconst initialState = {\n   data: [],\n   status: true\n};\n\nconst cards = (state = initialState, action) => {\n   let data;\n   let foundCard;\n\n   switch (action.type) {\n      case actionTypes.FETCH_CARDS:\n         return {\n            ...state,\n            data: [...action.data],\n            status: true\n         };\n\n      case actionTypes.FETCH_CARDS_STATUS:\n         return {\n            ...state,\n            status: action.status\n         };\n\n      case actionTypes.CARD_CHANGE_PIN:\n         data = state.data;\n         foundCard = data.find(card => card._id === action.id);\n\n         foundCard.pin = action.newPin;\n\n         return {\n            ...state,\n            data: [...data]\n         };\n\n      case actionTypes.CARD_CHANGE_LIMITS:\n         data = state.data;\n         foundCard = data.find(card => card._id === action.id);\n\n         const newOnlineLimit = action.dailyOnlineLimit;\n         const newWithdrawalLimit = action.dailyWithdrawalLimit;\n\n         if (newOnlineLimit) {\n            foundCard.dailyOnlineLimit = parseFloat(newOnlineLimit).toFixed(2);\n         }\n\n         if (newWithdrawalLimit) {\n            foundCard.dailyWithdrawalLimit = parseFloat(newWithdrawalLimit).toFixed(2);\n         }\n\n         return {\n            ...state,\n            data: [...data]\n         };\n\n      default:\n         return state;\n   }\n};\n\nexport default cards;\n"]},"metadata":{},"sourceType":"module"}