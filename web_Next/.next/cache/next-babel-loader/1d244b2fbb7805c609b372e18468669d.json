{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, Fragment } from 'react';\nimport LoadingAnimation from './LoadingAnimation';\n\nclass Loader extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      showError: false\n    });\n  }\n\n  render() {\n    return __jsx(Fragment, null, __jsx(LoadingAnimation, null), this.state.showError ? __jsx(\"p\", null, \"If loading takes too long, please refresh the page...\") : null);\n  }\n\n  componentDidMount() {\n    // Start timeout to show the error message\n    this.errorTimeout = setTimeout(() => this.setState({\n      showError: true\n    }), 3000);\n  }\n\n  componentWillUnmount() {\n    // Remove the timeout when component will be unmounted\n    // Otherwise it will still be working in background\n    clearTimeout(this.errorTimeout);\n  }\n\n}\n\nexport default Loader;","map":null,"metadata":{},"sourceType":"module"}