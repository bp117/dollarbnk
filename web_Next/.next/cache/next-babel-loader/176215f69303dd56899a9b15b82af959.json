{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as actionTypes from 'actions/actionTypes';\nconst initialState = {\n  data: [],\n  status: true\n};\n\nconst transfers = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.FETCH_TRANSFERS:\n      return _objectSpread({}, state, {\n        data: [...action.data],\n        status: true\n      });\n\n    case actionTypes.FETCH_TRANSFERS_STATUS:\n      return _objectSpread({}, state, {\n        status: action.status\n      });\n\n    case actionTypes.ADD_TRANSFER:\n      return _objectSpread({}, state, {\n        data: [...state.data, ...action.data]\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default transfers;","map":{"version":3,"sources":["/Users/binduraj/Documents/GitHub/dollarbank/web_Next/helper/reducers/transfers.js"],"names":["actionTypes","initialState","data","status","transfers","state","action","type","FETCH_TRANSFERS","FETCH_TRANSFERS_STATUS","ADD_TRANSFER"],"mappings":";;;;;;AAAA,OAAO,KAAKA,WAAZ,MAA6B,qBAA7B;AAEA,MAAMC,YAAY,GAAG;AAClBC,EAAAA,IAAI,EAAE,EADY;AAElBC,EAAAA,MAAM,EAAE;AAFU,CAArB;;AAKA,MAAMC,SAAS,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AACjD,UAAQA,MAAM,CAACC,IAAf;AACG,SAAKP,WAAW,CAACQ,eAAjB;AACG,+BACMH,KADN;AAEGH,QAAAA,IAAI,EAAE,CAAC,GAAGI,MAAM,CAACJ,IAAX,CAFT;AAGGC,QAAAA,MAAM,EAAE;AAHX;;AAMH,SAAKH,WAAW,CAACS,sBAAjB;AACG,+BACMJ,KADN;AAEGF,QAAAA,MAAM,EAAEG,MAAM,CAACH;AAFlB;;AAKH,SAAKH,WAAW,CAACU,YAAjB;AACG,+BACML,KADN;AAEGH,QAAAA,IAAI,EAAE,CAAC,GAAGG,KAAK,CAACH,IAAV,EAAgB,GAAGI,MAAM,CAACJ,IAA1B;AAFT;;AAKH;AACG,aAAOG,KAAP;AArBN;AAuBF,CAxBD;;AA0BA,eAAeD,SAAf","sourcesContent":["import * as actionTypes from 'actions/actionTypes';\n\nconst initialState = {\n   data: [],\n   status: true\n};\n\nconst transfers = (state = initialState, action) => {\n   switch (action.type) {\n      case actionTypes.FETCH_TRANSFERS:\n         return {\n            ...state,\n            data: [...action.data],\n            status: true\n         };\n\n      case actionTypes.FETCH_TRANSFERS_STATUS:\n         return {\n            ...state,\n            status: action.status\n         };\n\n      case actionTypes.ADD_TRANSFER:\n         return {\n            ...state,\n            data: [...state.data, ...action.data]\n         };\n\n      default:\n         return state;\n   }\n};\n\nexport default transfers;\n"]},"metadata":{},"sourceType":"module"}