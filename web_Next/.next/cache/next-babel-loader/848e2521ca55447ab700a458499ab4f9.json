{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { Form, Field, withFormik } from 'formik';\nimport Link from 'next/link';\nimport * as Yup from 'yup';\nimport SingleModuleButton from 'components/UI/Buttons/SingleModuleButton';\n\nconst InnerForm = props => {\n  const {\n    errors,\n    touched\n  } = props;\n  return __jsx(Form, {\n    className: \"register-form\"\n  }, __jsx(\"div\", null, __jsx(\"p\", null, __jsx(\"b\", null, \"Registration is currently inactive\")), __jsx(\"p\", null, __jsx(Link, {\n    href: \"/login\"\n  }, __jsx(\"a\", null, \"Already have an account?\")))), __jsx(SingleModuleButton, {\n    text: \"Create your account\",\n    type: \"submit\"\n  }));\n}; // Wrap our form with the using withFormik HoC\n\n\nconst RegisterForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => ({\n    email: '',\n    password: ''\n  }),\n  // Add a custom validation function (this can be async too!)\n  validationSchema: Yup.object().shape({\n    email: Yup.string().required('Email is required').email('This is not a valid email'),\n    password: Yup.string().required('Password is required').min(6, 'Your password has to be at least 6 characters')\n  }),\n  // Submission handler\n  handleSubmit: (values, {\n    props,\n    setStatus\n  }) => {\n    props.onRegisterSubmit(values.email, values.password);\n  }\n})(InnerForm);\nexport default RegisterForm;","map":null,"metadata":{},"sourceType":"module"}