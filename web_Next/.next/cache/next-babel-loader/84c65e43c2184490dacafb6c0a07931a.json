{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport PageContainer from 'hoc/PageContainer';\nimport { withRedux } from 'hoc/WithRedux';\nimport { connect } from 'react-redux';\nimport * as actions from 'actions';\nimport { initialDataStatus } from 'actions/panel';\nimport withAuth from 'hoc/WithAuth';\nimport { isValidToken } from 'tools';\nimport Loader from 'components/UI/Loader';\nimport Navigation from 'containers/Navigation';\nimport PanelIntro from 'containers/Panel/Intro';\nimport Accounts from 'containers/Accounts';\nimport Transfers from 'containers/Transfers';\nimport Cards from 'containers/Cards';\nimport Profile from 'containers/Profile';\nimport ProfileChangeDetails from 'containers/Profile/ChangeDetails';\nimport Messages from 'containers/Messages';\nimport Help from 'components/Help';\nimport { updateAPIConfig } from 'api/base';\nimport nextCookie from 'next-cookies/index';\nimport { getMyself } from 'api/users';\nimport getUserInitialData from 'tools/getUserInitialData';\nimport * as actionTypes from '../helper/actions/actionTypes';\n\nclass PanelPage extends Component {\n  static async getInitialProps(ctx) {\n    const {\n      reduxStore,\n      query\n    } = ctx;\n    const {\n      token\n    } = nextCookie(ctx);\n    updateAPIConfig({\n      authToken: token\n    });\n    const {\n      dispatch\n    } = reduxStore;\n    updateAPIConfig({\n      authToken: token\n    });\n\n    try {\n      const data = await getUserInitialData();\n\n      if (!data) {\n        dispatch(initialDataStatus(false));\n        return;\n      }\n\n      dispatch({\n        type: actionTypes.FETCH_PROFILE,\n        data: data.user\n      });\n      dispatch({\n        type: actionTypes.FETCH_ACCOUNTS,\n        data: data.accounts\n      });\n      dispatch({\n        type: actionTypes.FETCH_TRANSFERS,\n        data: data.transfers\n      });\n      dispatch({\n        type: actionTypes.FETCH_CARDS,\n        data: data.cards\n      });\n      dispatch({\n        type: actionTypes.FETCH_MESSAGES,\n        data: data.messages\n      });\n      dispatch(initialDataStatus(true));\n    } catch (err) {\n      dispatch(initialDataStatus(false));\n    }\n\n    return {\n      query\n    };\n  }\n\n  componentDidMount() {\n    isValidToken().then(() => {\n      this.props.fetchInitialData();\n    }).catch(() => {});\n  }\n\n  render() {\n    if (!this.props.initialDataStatus) {\n      return __jsx(Loader, null);\n    } else {\n      const subPage = getSubPage(this.props);\n      return __jsx(PageContainer, null, __jsx(Navigation, null), subPage);\n    }\n  }\n\n}\n\nfunction getSubPage(props) {\n  const {\n    query = {}\n  } = props,\n        {\n    slug\n  } = query;\n\n  switch (slug) {\n    case 'accounts':\n      return __jsx(Accounts, {\n        query\n      });\n      break;\n\n    case 'transfers':\n      return __jsx(Transfers, {\n        query\n      });\n      break;\n\n    case 'cards':\n      return __jsx(Cards, {\n        query\n      });\n      break;\n\n    case 'profile':\n      return __jsx(Profile, null);\n      break;\n\n    case 'change-details':\n      return __jsx(ProfileChangeDetails, null);\n      break;\n\n    case 'messages':\n      return __jsx(Messages, {\n        query\n      });\n      break;\n\n    case 'help':\n      return __jsx(Help, null);\n      break;\n\n    default:\n      return __jsx(PanelIntro, null);\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    initialDataStatus: state.panel.initialDataStatus,\n    authStatus: state.auth.status\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setAuthStatus: status => dispatch(actions.setAuthStatus(status)),\n    fetchInitialData: () => dispatch(actions.fetchInitialData())\n  };\n};\n\nexport default withRedux(connect(mapStateToProps, mapDispatchToProps)(withAuth(PanelPage)));","map":null,"metadata":{},"sourceType":"module"}