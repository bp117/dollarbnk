{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport _ from 'lodash';\nimport { getMyCards, changePin, changeLimits } from 'api/cards';\nimport * as actionTypes from './actionTypes'; // Get all user's cards\n\nexport const fetchCards = () => async dispatch => {\n  try {\n    const data = await getMyCards();\n\n    if (!data) {\n      dispatch(fetchCardsStatus(false));\n      return;\n    }\n\n    dispatch({\n      type: actionTypes.FETCH_CARDS,\n      data\n    });\n  } catch (err) {\n    dispatch(fetchCardsStatus(false));\n  }\n};\nexport const fetchCardsStatus = status => ({\n  type: actionTypes.FETCH_CARDS_STATUS,\n  status\n}); // Change card's PIN\n\nexport const changeCardPin = (id, newPin) => async dispatch => {\n  try {\n    const card = await changePin(id, newPin);\n\n    if (!card) {\n      return;\n    }\n\n    dispatch({\n      type: actionTypes.CARD_CHANGE_PIN,\n      id,\n      newPin\n    });\n  } catch (err) {}\n}; // Change card's limits\n\nexport const changeCardLimits = (id, newOnlineLimit, newWithdrawalLimit) => async dispatch => {\n  try {\n    const limits = {};\n\n    if (newOnlineLimit) {\n      limits.dailyOnlineLimit = parseFloat(newOnlineLimit).toFixed(2);\n    }\n\n    if (newWithdrawalLimit) {\n      limits.dailyWithdrawalLimit = parseFloat(newWithdrawalLimit).toFixed(2);\n    }\n\n    if (!_.isEmpty(limits)) {\n      const card = await changeLimits(id, _objectSpread({}, limits));\n\n      if (!card) {\n        return;\n      }\n\n      dispatch(_objectSpread({\n        type: actionTypes.CARD_CHANGE_LIMITS,\n        id\n      }, limits));\n    }\n  } catch (err) {}\n};","map":null,"metadata":{},"sourceType":"module"}