{"ast":null,"code":"import { getMyMessages, toggleMessageRead, removeMessage } from 'api/messages';\nimport * as actionTypes from './actionTypes'; // Fetch messages\n\nexport const fetchMessages = () => async dispatch => {\n  try {\n    // Set status to false on every start, so it can be reusable\n    dispatch(fetchMessagesStatus(false));\n    const data = await getMyMessages();\n\n    if (!data) {\n      dispatch(fetchMessagesStatus(false));\n      return;\n    }\n\n    dispatch({\n      type: actionTypes.FETCH_MESSAGES,\n      data\n    });\n  } catch (err) {\n    dispatch(fetchMessagesStatus(false));\n  }\n};\nexport const fetchMessagesStatus = status => ({\n  type: actionTypes.FETCH_MESSAGES_STATUS,\n  status\n}); // Toggle message read\n\nexport const messageToggle = id => async dispatch => {\n  try {\n    const message = await toggleMessageRead(id);\n\n    if (!message) {\n      return;\n    }\n\n    dispatch({\n      type: actionTypes.MESSAGE_TOGGLE,\n      id\n    });\n  } catch (err) {}\n}; // Remove message\n\nexport const messageRemove = id => async dispatch => {\n  try {\n    const message = await removeMessage(id);\n\n    if (!message) {\n      return;\n    }\n\n    dispatch({\n      type: actionTypes.MESSAGE_REMOVE,\n      id\n    });\n  } catch (err) {}\n};","map":{"version":3,"sources":["/Users/binduraj/Documents/GitHub/dollarbank/web_Next/helper/actions/messages.js"],"names":["getMyMessages","toggleMessageRead","removeMessage","actionTypes","fetchMessages","dispatch","fetchMessagesStatus","data","type","FETCH_MESSAGES","err","status","FETCH_MESSAGES_STATUS","messageToggle","id","message","MESSAGE_TOGGLE","messageRemove","MESSAGE_REMOVE"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,iBAAxB,EAA2CC,aAA3C,QAAgE,cAAhE;AACA,OAAO,KAAKC,WAAZ,MAA6B,eAA7B,C,CAEA;;AACA,OAAO,MAAMC,aAAa,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAClD,MAAI;AACD;AACAA,IAAAA,QAAQ,CAACC,mBAAmB,CAAC,KAAD,CAApB,CAAR;AAEA,UAAMC,IAAI,GAAG,MAAMP,aAAa,EAAhC;;AAEA,QAAI,CAACO,IAAL,EAAW;AACRF,MAAAA,QAAQ,CAACC,mBAAmB,CAAC,KAAD,CAApB,CAAR;AACA;AACF;;AAEDD,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEL,WAAW,CAACM,cAApB;AAAoCF,MAAAA;AAApC,KAAD,CAAR;AACF,GAZD,CAYE,OAAOG,GAAP,EAAY;AACXL,IAAAA,QAAQ,CAACC,mBAAmB,CAAC,KAAD,CAApB,CAAR;AACF;AACH,CAhBM;AAkBP,OAAO,MAAMA,mBAAmB,GAAGK,MAAM,KAAK;AAC3CH,EAAAA,IAAI,EAAEL,WAAW,CAACS,qBADyB;AAE3CD,EAAAA;AAF2C,CAAL,CAAlC,C,CAKP;;AACA,OAAO,MAAME,aAAa,GAAGC,EAAE,IAAI,MAAMT,QAAN,IAAkB;AAClD,MAAI;AACD,UAAMU,OAAO,GAAG,MAAMd,iBAAiB,CAACa,EAAD,CAAvC;;AAEA,QAAI,CAACC,OAAL,EAAc;AACX;AACF;;AAEDV,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEL,WAAW,CAACa,cAApB;AAAoCF,MAAAA;AAApC,KAAD,CAAR;AACF,GARD,CAQE,OAAOJ,GAAP,EAAY,CAAE;AAClB,CAVM,C,CAYP;;AACA,OAAO,MAAMO,aAAa,GAAGH,EAAE,IAAI,MAAMT,QAAN,IAAkB;AAClD,MAAI;AACD,UAAMU,OAAO,GAAG,MAAMb,aAAa,CAACY,EAAD,CAAnC;;AAEA,QAAI,CAACC,OAAL,EAAc;AACX;AACF;;AAEDV,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEL,WAAW,CAACe,cAApB;AAAoCJ,MAAAA;AAApC,KAAD,CAAR;AACF,GARD,CAQE,OAAOJ,GAAP,EAAY,CAAE;AAClB,CAVM","sourcesContent":["import { getMyMessages, toggleMessageRead, removeMessage } from 'api/messages';\nimport * as actionTypes from './actionTypes';\n\n// Fetch messages\nexport const fetchMessages = () => async dispatch => {\n   try {\n      // Set status to false on every start, so it can be reusable\n      dispatch(fetchMessagesStatus(false));\n\n      const data = await getMyMessages();\n\n      if (!data) {\n         dispatch(fetchMessagesStatus(false));\n         return;\n      }\n\n      dispatch({ type: actionTypes.FETCH_MESSAGES, data });\n   } catch (err) {\n      dispatch(fetchMessagesStatus(false));\n   }\n};\n\nexport const fetchMessagesStatus = status => ({\n   type: actionTypes.FETCH_MESSAGES_STATUS,\n   status\n});\n\n// Toggle message read\nexport const messageToggle = id => async dispatch => {\n   try {\n      const message = await toggleMessageRead(id);\n\n      if (!message) {\n         return;\n      }\n\n      dispatch({ type: actionTypes.MESSAGE_TOGGLE, id });\n   } catch (err) {}\n};\n\n// Remove message\nexport const messageRemove = id => async dispatch => {\n   try {\n      const message = await removeMessage(id);\n\n      if (!message) {\n         return;\n      }\n\n      dispatch({ type: actionTypes.MESSAGE_REMOVE, id });\n   } catch (err) {}\n};\n"]},"metadata":{},"sourceType":"module"}