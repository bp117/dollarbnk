{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { Form, Field, withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport SingleModuleButton from 'components/UI/Buttons/SingleModuleButton';\n\nconst InnerForm = props => {\n  const {\n    errors,\n    touched\n  } = props;\n  return __jsx(Form, null, __jsx(\"div\", null, __jsx(\"p\", null, \"If you want to change email, please contact the administrator.\"), __jsx(\"p\", null, \"Below you can change your password\"), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(Field, {\n    type: \"email\",\n    className: \"form-control login-input\",\n    name: \"email\",\n    disabled: true\n  })), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(Field, {\n    type: \"password\",\n    className: \"form-control password-input\",\n    name: \"password\",\n    placeholder: \"Enter new password...\"\n  }), touched.password && errors.password && __jsx(\"p\", {\n    className: \"field-invalid\"\n  }, errors.password)), __jsx(\"p\", {\n    className: \"validation-info\"\n  }, props.status)), __jsx(SingleModuleButton, {\n    text: \"Save details\",\n    type: \"submit\"\n  }));\n}; // Wrap our form with the using withFormik HoC\n\n\nconst ChangeDetailsForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => ({\n    email: props.userEmail,\n    password: ''\n  }),\n  validationSchema: Yup.object().shape({\n    email: Yup.string().email('This is not a valid email'),\n    password: Yup.string().min(6, 'Your password has to be at least 6 characters')\n  }),\n  // Submission handler\n  handleSubmit: (values, {\n    props,\n    setStatus\n  }) => {\n    const {\n      email,\n      password\n    } = values;\n\n    if (!password) {\n      setStatus('No details changed');\n      return;\n    }\n\n    setStatus('Sending...');\n    props.changeUserDetails(email, password).then(() => setStatus('Details successfully changed!')).catch(error => setStatus('Problems... please log out and try again'));\n  }\n})(InnerForm);\nexport default ChangeDetailsForm;","map":{"version":3,"sources":["/Users/binduraj/Documents/GitHub/dollarbank/web_Next/components/containers/Profile/ChangeDetails/Form.js"],"names":["React","Form","Field","withFormik","Yup","SingleModuleButton","InnerForm","props","errors","touched","password","status","ChangeDetailsForm","mapPropsToValues","email","userEmail","validationSchema","object","shape","string","min","handleSubmit","values","setStatus","changeUserDetails","then","catch","error"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,UAAtB,QAAwC,QAAxC;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,kBAAP,MAA+B,0CAA/B;;AAEA,MAAMC,SAAS,GAAGC,KAAK,IAAI;AACxB,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAsBF,KAA5B;AAEA,SACG,MAAC,IAAD,QACG,mBACG,kFADH,EAEG,sDAFH,EAIG;AAAK,IAAA,SAAS,EAAC;AAAf,KACG,MAAC,KAAD;AAAO,IAAA,IAAI,EAAC,OAAZ;AAAoB,IAAA,SAAS,EAAC,0BAA9B;AAAyD,IAAA,IAAI,EAAC,OAA9D;AAAsE,IAAA,QAAQ;AAA9E,IADH,CAJH,EAQG;AAAK,IAAA,SAAS,EAAC;AAAf,KACG,MAAC,KAAD;AACG,IAAA,IAAI,EAAC,UADR;AAEG,IAAA,SAAS,EAAC,6BAFb;AAGG,IAAA,IAAI,EAAC,UAHR;AAIG,IAAA,WAAW,EAAC;AAJf,IADH,EAOIE,OAAO,CAACC,QAAR,IAAoBF,MAAM,CAACE,QAA3B,IACE;AAAG,IAAA,SAAS,EAAC;AAAb,KAA8BF,MAAM,CAACE,QAArC,CARN,CARH,EAoBG;AAAG,IAAA,SAAS,EAAC;AAAb,KAAgCH,KAAK,CAACI,MAAtC,CApBH,CADH,EAwBG,MAAC,kBAAD;AAAoB,IAAA,IAAI,EAAC,cAAzB;AAAwC,IAAA,IAAI,EAAC;AAA7C,IAxBH,CADH;AA4BF,CA/BD,C,CAiCA;;;AACA,MAAMC,iBAAiB,GAAGT,UAAU,CAAC;AAClC;AACAU,EAAAA,gBAAgB,EAAEN,KAAK,KAAK;AAAEO,IAAAA,KAAK,EAAEP,KAAK,CAACQ,SAAf;AAA0BL,IAAAA,QAAQ,EAAE;AAApC,GAAL,CAFW;AAIlCM,EAAAA,gBAAgB,EAAEZ,GAAG,CAACa,MAAJ,GAAaC,KAAb,CAAmB;AAClCJ,IAAAA,KAAK,EAAEV,GAAG,CAACe,MAAJ,GAAaL,KAAb,CAAmB,2BAAnB,CAD2B;AAElCJ,IAAAA,QAAQ,EAAEN,GAAG,CAACe,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoB,+CAApB;AAFwB,GAAnB,CAJgB;AASlC;AACAC,EAAAA,YAAY,EAAE,CAACC,MAAD,EAAS;AAAEf,IAAAA,KAAF;AAASgB,IAAAA;AAAT,GAAT,KAAkC;AAC7C,UAAM;AAAET,MAAAA,KAAF;AAASJ,MAAAA;AAAT,QAAsBY,MAA5B;;AAEA,QAAI,CAACZ,QAAL,EAAe;AACZa,MAAAA,SAAS,CAAC,oBAAD,CAAT;AACA;AACF;;AAEDA,IAAAA,SAAS,CAAC,YAAD,CAAT;AAEAhB,IAAAA,KAAK,CACDiB,iBADJ,CACsBV,KADtB,EAC6BJ,QAD7B,EAEIe,IAFJ,CAES,MAAMF,SAAS,CAAC,+BAAD,CAFxB,EAGIG,KAHJ,CAGUC,KAAK,IAAIJ,SAAS,CAAC,0CAAD,CAH5B;AAIF;AAxBiC,CAAD,CAAV,CAyBvBjB,SAzBuB,CAA1B;AA2BA,eAAeM,iBAAf","sourcesContent":["import React from 'react';\nimport { Form, Field, withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport SingleModuleButton from 'components/UI/Buttons/SingleModuleButton';\n\nconst InnerForm = props => {\n   const { errors, touched } = props;\n\n   return (\n      <Form>\n         <div>\n            <p>If you want to change email, please contact the administrator.</p>\n            <p>Below you can change your password</p>\n\n            <div className=\"form-group\">\n               <Field type=\"email\" className=\"form-control login-input\" name=\"email\" disabled />\n            </div>\n\n            <div className=\"form-group\">\n               <Field\n                  type=\"password\"\n                  className=\"form-control password-input\"\n                  name=\"password\"\n                  placeholder=\"Enter new password...\"\n               />\n               {touched.password && errors.password && (\n                  <p className=\"field-invalid\">{errors.password}</p>\n               )}\n            </div>\n\n            <p className=\"validation-info\">{props.status}</p>\n         </div>\n\n         <SingleModuleButton text=\"Save details\" type=\"submit\" />\n      </Form>\n   );\n};\n\n// Wrap our form with the using withFormik HoC\nconst ChangeDetailsForm = withFormik({\n   // Transform outer props into form values\n   mapPropsToValues: props => ({ email: props.userEmail, password: '' }),\n\n   validationSchema: Yup.object().shape({\n      email: Yup.string().email('This is not a valid email'),\n      password: Yup.string().min(6, 'Your password has to be at least 6 characters')\n   }),\n\n   // Submission handler\n   handleSubmit: (values, { props, setStatus }) => {\n      const { email, password } = values;\n\n      if (!password) {\n         setStatus('No details changed');\n         return;\n      }\n\n      setStatus('Sending...');\n\n      props\n         .changeUserDetails(email, password)\n         .then(() => setStatus('Details successfully changed!'))\n         .catch(error => setStatus('Problems... please log out and try again'));\n   }\n})(InnerForm);\n\nexport default ChangeDetailsForm;\n"]},"metadata":{},"sourceType":"module"}