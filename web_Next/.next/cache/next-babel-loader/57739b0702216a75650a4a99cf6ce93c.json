{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { getMyTransfers, createTransfer } from 'api/transfers';\nimport * as actionTypes from './actionTypes';\nexport const fetchTransfers = () => async dispatch => {\n  try {\n    // Set status to false on every start, so it can be reusable\n    dispatch(fetchTransfersStatus(false));\n    const data = await getMyTransfers();\n\n    if (!data) {\n      dispatch(fetchTransfersStatus(false));\n      return;\n    }\n\n    dispatch({\n      type: actionTypes.FETCH_TRANSFERS,\n      data\n    });\n  } catch (err) {\n    dispatch(fetchTransfersStatus(false));\n  }\n};\nexport const fetchTransfersStatus = status => ({\n  type: actionTypes.FETCH_TRANSFERS_STATUS,\n  status\n});\nexport const addTransfer = data => async dispatch => {\n  try {\n    const transData = _objectSpread({}, data, {\n      amount: parseFloat(data.amount).toFixed(2),\n      date: new Date(),\n      payeeAccNumber: parseInt(data.payeeAccNumber, 10),\n      payeeSortcode: parseInt(data.payeeSortcode, 10),\n      status: 'Done',\n      type: 'Transfer'\n    });\n\n    const transfer = await createTransfer(transData);\n\n    if (!transfer) {\n      dispatch(fetchTransfersStatus(false));\n      return;\n    }\n\n    dispatch({\n      type: actionTypes.ADD_TRANSFER,\n      data: transData\n    });\n  } catch (err) {\n    dispatch(fetchTransfersStatus(false));\n  }\n};","map":null,"metadata":{},"sourceType":"module"}