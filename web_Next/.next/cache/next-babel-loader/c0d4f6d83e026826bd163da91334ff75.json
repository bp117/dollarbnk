{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { Form, Field, withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport SingleModuleButton from 'components/UI/Buttons/SingleModuleButton'; // API\n\nimport { sendHelpForm } from 'api/forms';\n\nvar InnerForm = function InnerForm(props) {\n  var errors = props.errors,\n      touched = props.touched;\n  return __jsx(Form, null, __jsx(\"div\", null, __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"name\"\n  }, \"Your name\"), __jsx(Field, {\n    id: \"name\",\n    type: \"text\",\n    className: \"form-control\",\n    name: \"name\",\n    placeholder: \"Your name...\"\n  }), touched.name && errors.name && __jsx(\"p\", {\n    className: \"field-invalid\"\n  }, errors.name)), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"email\"\n  }, \"Your email\"), __jsx(Field, {\n    id: \"email\",\n    type: \"email\",\n    className: \"form-control\",\n    name: \"email\",\n    placeholder: \"Your email...\"\n  }), touched.email && errors.email && __jsx(\"p\", {\n    className: \"field-invalid\"\n  }, errors.email)), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"subject\"\n  }, \"Subject\"), __jsx(Field, {\n    id: \"subject\",\n    component: \"select\",\n    className: \"form-control\",\n    name: \"subject\"\n  }, __jsx(\"option\", {\n    value: \"\",\n    disabled: true\n  }, \"Choose subject\"), __jsx(\"option\", null, \"Subject 1\"), __jsx(\"option\", null, \"Subject 2\"), __jsx(\"option\", null, \"Subject 3\")), touched.subject && errors.subject && __jsx(\"p\", {\n    className: \"field-invalid\"\n  }, errors.subject)), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"message\"\n  }, \"Message\"), __jsx(Field, {\n    id: \"message\",\n    component: \"textarea\",\n    rows: \"6\",\n    className: \"form-control\",\n    name: \"message\"\n  }), touched.message && errors.message && __jsx(\"p\", {\n    className: \"field-invalid\"\n  }, errors.message)), __jsx(\"p\", {\n    className: \"validation-info\"\n  }, props.status)), __jsx(SingleModuleButton, {\n    text: \"Send message\",\n    type: \"submit\"\n  }));\n}; // Wrap our form with the using withFormik HoC\n\n\nvar ContactForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: function mapPropsToValues(props) {\n    return {\n      name: '',\n      email: '',\n      subject: '',\n      message: ''\n    };\n  },\n  // Add a custom validation function (this can be async too!)\n  validationSchema: Yup.object().shape({\n    name: Yup.string().required('Name is required'),\n    email: Yup.string().required('Email is required').email('This is not a valid email'),\n    subject: Yup.string().required('Subject is required'),\n    message: Yup.string().required('Message is required').min(6, 'Please enter at least 6 characters')\n  }),\n  // Submission handler\n  handleSubmit: function handleSubmit(values, _ref) {\n    var props = _ref.props,\n        setStatus = _ref.setStatus;\n    var name = values.name,\n        email = values.email,\n        subject = values.subject,\n        message = values.message;\n    setStatus('Sending...');\n    sendHelpForm({\n      name: name,\n      email: email,\n      subject: subject,\n      message: message\n    }).then(function (res) {\n      return res.data;\n    }).then(function (res) {\n      return setStatus('Your message has been sent');\n    })[\"catch\"](function (err) {\n      return setStatus('Your message has been sent');\n    });\n  }\n})(InnerForm);\nexport default ContactForm;","map":null,"metadata":{},"sourceType":"module"}