{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _ from 'lodash';\nimport { getMyCards, changePin, changeLimits } from 'api/cards';\nimport * as actionTypes from './actionTypes'; // Get all user's cards\n\nexport var fetchCards = function fetchCards() {\n  return function _callee(dispatch) {\n    var data;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(getMyCards());\n\n          case 3:\n            data = _context.sent;\n\n            if (data) {\n              _context.next = 7;\n              break;\n            }\n\n            dispatch(fetchCardsStatus(false));\n            return _context.abrupt(\"return\");\n\n          case 7:\n            dispatch({\n              type: actionTypes.FETCH_CARDS,\n              data: data\n            });\n            _context.next = 13;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            dispatch(fetchCardsStatus(false));\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 10]], Promise);\n  };\n};\nexport var fetchCardsStatus = function fetchCardsStatus(status) {\n  return {\n    type: actionTypes.FETCH_CARDS_STATUS,\n    status: status\n  };\n}; // Change card's PIN\n\nexport var changeCardPin = function changeCardPin(id, newPin) {\n  return function _callee2(dispatch) {\n    var card;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(changePin(id, newPin));\n\n          case 3:\n            card = _context2.sent;\n\n            if (card) {\n              _context2.next = 6;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 6:\n            dispatch({\n              type: actionTypes.CARD_CHANGE_PIN,\n              id: id,\n              newPin: newPin\n            });\n            _context2.next = 11;\n            break;\n\n          case 9:\n            _context2.prev = 9;\n            _context2.t0 = _context2[\"catch\"](0);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  };\n}; // Change card's limits\n\nexport var changeCardLimits = function changeCardLimits(id, newOnlineLimit, newWithdrawalLimit) {\n  return function _callee3(dispatch) {\n    var limits, card;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            limits = {};\n\n            if (newOnlineLimit) {\n              limits.dailyOnlineLimit = parseFloat(newOnlineLimit).toFixed(2);\n            }\n\n            if (newWithdrawalLimit) {\n              limits.dailyWithdrawalLimit = parseFloat(newWithdrawalLimit).toFixed(2);\n            }\n\n            if (_.isEmpty(limits)) {\n              _context3.next = 11;\n              break;\n            }\n\n            _context3.next = 7;\n            return _regeneratorRuntime.awrap(changeLimits(id, _objectSpread({}, limits)));\n\n          case 7:\n            card = _context3.sent;\n\n            if (card) {\n              _context3.next = 10;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 10:\n            dispatch(_objectSpread({\n              type: actionTypes.CARD_CHANGE_LIMITS,\n              id: id\n            }, limits));\n\n          case 11:\n            _context3.next = 15;\n            break;\n\n          case 13:\n            _context3.prev = 13;\n            _context3.t0 = _context3[\"catch\"](0);\n\n          case 15:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 13]], Promise);\n  };\n};","map":null,"metadata":{},"sourceType":"module"}