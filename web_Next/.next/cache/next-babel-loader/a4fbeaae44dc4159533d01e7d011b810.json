{"ast":null,"code":"import format from 'date-fns/format';\nimport jwtDecode from 'jwt-decode';\nimport nextCookie from 'next-cookies';\nimport cookie from 'js-cookie';\nimport Router from 'next/router'; // Add padding from the start of the current string/number\n\nexport var myPadStart = function myPadStart(el, targetLength, padString) {\n  return el.toString().padStart(targetLength, padString);\n}; // Insert something after every n characters in the string\n\nexport var chunker = function chunker(el, step, string) {\n  var regExp = new RegExp(\".{\".concat(step, \"}\"), 'g');\n  return el.toString().match(regExp).join(string);\n}; // Format date\n\nexport var formatDate = function formatDate(date, dateFormat) {\n  return format(new Date(date), dateFormat);\n}; // Token checker\n\nexport var getAuthToken = function getAuthToken() {\n  return cookie.get('token');\n};\nexport var setAuthToken = function setAuthToken(token) {\n  cookie.set('token', token);\n};\nexport var removeAuthToken = function removeAuthToken() {\n  cookie.remove('token');\n};\nexport var isValidToken = function isValidToken() {\n  return new Promise(function (resolve, reject) {\n    var token = checkValidToken();\n\n    if (token) {\n      resolve(token);\n    } else {\n      reject();\n    }\n  });\n};\nexport var checkValidToken = function checkValidToken() {\n  var currentTime = Date.now().valueOf() / 1000;\n  var token = getAuthToken();\n\n  if (!token) {\n    return;\n  }\n\n  var decodedToken = jwtDecode(token); // If token expired - remove it\n\n  if (decodedToken.exp < currentTime) {\n    removeAuthToken();\n    return;\n  }\n\n  return token;\n};\nexport var auth = function auth(ctx) {\n  var _nextCookie = nextCookie(ctx),\n      token = _nextCookie.token,\n      pathname = ctx.pathname;\n\n  if (pathname === '/login') {\n    if (!token) {\n      return false;\n    }\n\n    if (false) {\n      ctx.res.writeHead(302, {\n        Location: '/panel'\n      });\n      ctx.res.end();\n    } else {\n      Router.push('/panel');\n    }\n  } // If there's no token, it means the user is not logged in.\n\n\n  if (!token) {\n    if (false) {\n      ctx.res.writeHead(302, {\n        Location: '/login'\n      });\n      ctx.res.end();\n    } else {\n      Router.push('/login');\n    }\n  }\n\n  return token;\n};","map":null,"metadata":{},"sourceType":"module"}