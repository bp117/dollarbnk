{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { getMyTransfers, createTransfer } from 'api/transfers';\nimport * as actionTypes from './actionTypes';\nexport var fetchTransfers = function fetchTransfers() {\n  return function _callee(dispatch) {\n    var data;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            // Set status to false on every start, so it can be reusable\n            dispatch(fetchTransfersStatus(false));\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(getMyTransfers());\n\n          case 4:\n            data = _context.sent;\n\n            if (data) {\n              _context.next = 8;\n              break;\n            }\n\n            dispatch(fetchTransfersStatus(false));\n            return _context.abrupt(\"return\");\n\n          case 8:\n            dispatch({\n              type: actionTypes.FETCH_TRANSFERS,\n              data: data\n            });\n            _context.next = 14;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](0);\n            dispatch(fetchTransfersStatus(false));\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 11]], Promise);\n  };\n};\nexport var fetchTransfersStatus = function fetchTransfersStatus(status) {\n  return {\n    type: actionTypes.FETCH_TRANSFERS_STATUS,\n    status: status\n  };\n};\nexport var addTransfer = function addTransfer(data) {\n  return function _callee2(dispatch) {\n    var transData, transfer;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            transData = _objectSpread({}, data, {\n              amount: parseFloat(data.amount).toFixed(2),\n              date: new Date(),\n              payeeAccNumber: parseInt(data.payeeAccNumber, 10),\n              payeeSortcode: parseInt(data.payeeSortcode, 10),\n              status: 'Done',\n              type: 'Transfer'\n            });\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(createTransfer(transData));\n\n          case 4:\n            transfer = _context2.sent;\n\n            if (transfer) {\n              _context2.next = 8;\n              break;\n            }\n\n            dispatch(fetchTransfersStatus(false));\n            return _context2.abrupt(\"return\");\n\n          case 8:\n            dispatch({\n              type: actionTypes.ADD_TRANSFER,\n              data: transData\n            });\n            _context2.next = 14;\n            break;\n\n          case 11:\n            _context2.prev = 11;\n            _context2.t0 = _context2[\"catch\"](0);\n            dispatch(fetchTransfersStatus(false));\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 11]], Promise);\n  };\n};","map":null,"metadata":{},"sourceType":"module"}