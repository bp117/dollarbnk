{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PageContainer from 'hoc/PageContainer';\nimport { withRedux } from 'hoc/WithRedux';\nimport { connect } from 'react-redux';\nimport * as actions from 'actions';\nimport { initialDataStatus } from 'actions/panel';\nimport withAuth from 'hoc/WithAuth';\nimport { isValidToken } from 'tools';\nimport Loader from 'components/UI/Loader';\nimport Navigation from 'containers/Navigation';\nimport PanelIntro from 'containers/Panel/Intro';\nimport Accounts from 'containers/Accounts';\nimport Transfers from 'containers/Transfers';\nimport Cards from 'containers/Cards';\nimport Profile from 'containers/Profile';\nimport ProfileChangeDetails from 'containers/Profile/ChangeDetails';\nimport Messages from 'containers/Messages';\nimport Help from 'components/Help';\nimport { updateAPIConfig } from 'api/base';\nimport nextCookie from 'next-cookies/index';\nimport { getMyself } from 'api/users';\nimport getUserInitialData from 'tools/getUserInitialData';\nimport * as actionTypes from '../helper/actions/actionTypes';\n\nvar PanelPage = /*#__PURE__*/function (_Component) {\n  _inherits(PanelPage, _Component);\n\n  var _super = _createSuper(PanelPage);\n\n  function PanelPage() {\n    _classCallCheck(this, PanelPage);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PanelPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this = this;\n\n      isValidToken().then(function () {\n        _this.props.fetchInitialData();\n      })[\"catch\"](function () {});\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.props.initialDataStatus) {\n        return __jsx(Loader, null);\n      } else {\n        var subPage = getSubPage(this.props);\n        return __jsx(PageContainer, null, __jsx(Navigation, null), subPage);\n      }\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(ctx) {\n      var reduxStore, query, _nextCookie, token, dispatch, data;\n\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              reduxStore = ctx.reduxStore, query = ctx.query;\n              _nextCookie = nextCookie(ctx), token = _nextCookie.token;\n              updateAPIConfig({\n                authToken: token\n              });\n              dispatch = reduxStore.dispatch;\n              updateAPIConfig({\n                authToken: token\n              });\n              _context.prev = 5;\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(getUserInitialData());\n\n            case 8:\n              data = _context.sent;\n\n              if (data) {\n                _context.next = 12;\n                break;\n              }\n\n              dispatch(initialDataStatus(false));\n              return _context.abrupt(\"return\");\n\n            case 12:\n              dispatch({\n                type: actionTypes.FETCH_PROFILE,\n                data: data.user\n              });\n              dispatch({\n                type: actionTypes.FETCH_ACCOUNTS,\n                data: data.accounts\n              });\n              dispatch({\n                type: actionTypes.FETCH_TRANSFERS,\n                data: data.transfers\n              });\n              dispatch({\n                type: actionTypes.FETCH_CARDS,\n                data: data.cards\n              });\n              dispatch({\n                type: actionTypes.FETCH_MESSAGES,\n                data: data.messages\n              });\n              dispatch(initialDataStatus(true));\n              _context.next = 23;\n              break;\n\n            case 20:\n              _context.prev = 20;\n              _context.t0 = _context[\"catch\"](5);\n              dispatch(initialDataStatus(false));\n\n            case 23:\n              return _context.abrupt(\"return\", {\n                query: query\n              });\n\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[5, 20]], Promise);\n    }\n  }]);\n\n  return PanelPage;\n}(Component);\n\nfunction getSubPage(props) {\n  var _props$query = props.query,\n      query = _props$query === void 0 ? {} : _props$query,\n      slug = query.slug;\n\n  switch (slug) {\n    case 'accounts':\n      return __jsx(Accounts, {\n        query: query\n      });\n      break;\n\n    case 'transfers':\n      return __jsx(Transfers, {\n        query: query\n      });\n      break;\n\n    case 'cards':\n      return __jsx(Cards, {\n        query: query\n      });\n      break;\n\n    case 'profile':\n      return __jsx(Profile, null);\n      break;\n\n    case 'change-details':\n      return __jsx(ProfileChangeDetails, null);\n      break;\n\n    case 'messages':\n      return __jsx(Messages, {\n        query: query\n      });\n      break;\n\n    case 'help':\n      return __jsx(Help, null);\n      break;\n\n    default:\n      return __jsx(PanelIntro, null);\n  }\n}\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    initialDataStatus: state.panel.initialDataStatus,\n    authStatus: state.auth.status\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setAuthStatus: function setAuthStatus(status) {\n      return dispatch(actions.setAuthStatus(status));\n    },\n    fetchInitialData: function fetchInitialData() {\n      return dispatch(actions.fetchInitialData());\n    }\n  };\n};\n\nexport default withRedux(connect(mapStateToProps, mapDispatchToProps)(withAuth(PanelPage)));","map":null,"metadata":{},"sourceType":"module"}