{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as actionTypes from 'actions/actionTypes';\nvar initialState = {\n  data: [],\n  status: true\n};\n\nvar cards = function cards() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var data;\n  var foundCard;\n\n  switch (action.type) {\n    case actionTypes.FETCH_CARDS:\n      return _objectSpread({}, state, {\n        data: _toConsumableArray(action.data),\n        status: true\n      });\n\n    case actionTypes.FETCH_CARDS_STATUS:\n      return _objectSpread({}, state, {\n        status: action.status\n      });\n\n    case actionTypes.CARD_CHANGE_PIN:\n      data = state.data;\n      foundCard = data.find(function (card) {\n        return card._id === action.id;\n      });\n      foundCard.pin = action.newPin;\n      return _objectSpread({}, state, {\n        data: _toConsumableArray(data)\n      });\n\n    case actionTypes.CARD_CHANGE_LIMITS:\n      data = state.data;\n      foundCard = data.find(function (card) {\n        return card._id === action.id;\n      });\n      var newOnlineLimit = action.dailyOnlineLimit;\n      var newWithdrawalLimit = action.dailyWithdrawalLimit;\n\n      if (newOnlineLimit) {\n        foundCard.dailyOnlineLimit = parseFloat(newOnlineLimit).toFixed(2);\n      }\n\n      if (newWithdrawalLimit) {\n        foundCard.dailyWithdrawalLimit = parseFloat(newWithdrawalLimit).toFixed(2);\n      }\n\n      return _objectSpread({}, state, {\n        data: _toConsumableArray(data)\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default cards;","map":null,"metadata":{},"sourceType":"module"}