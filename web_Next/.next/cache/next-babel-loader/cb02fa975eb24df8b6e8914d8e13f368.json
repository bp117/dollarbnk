{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport Router from 'next/router';\nimport * as actions from 'actions';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { updateAPIConfig } from 'api/base';\nimport { auth, checkValidToken, isValidToken, login } from 'tools'; // Handle redirects for /login, /register and /panel\n\nconst withAuth = WrappedComponent => {\n  return class extends Component {\n    static async getInitialProps(ctx) {\n      // Tick the time once, so we'll have a\n      // valid time before first render\n      const token = auth(ctx),\n            status = !!token;\n      const {\n        reduxStore\n      } = ctx,\n            {\n        dispatch\n      } = reduxStore;\n      updateAPIConfig({\n        authToken: token\n      });\n      dispatch(actions.setAuthStatus(status));\n      const componentProps = WrappedComponent.getInitialProps && (await WrappedComponent.getInitialProps(_objectSpread({}, ctx, {\n        serverAuthStatus: status\n      })));\n      return _objectSpread({}, componentProps, {\n        serverAuthStatus: status\n      });\n    }\n\n    constructor(props) {\n      super(props);\n      const token = checkValidToken();\n\n      if (token) {\n        updateAPIConfig({\n          authToken: token\n        });\n      }\n    }\n\n    componentDidMount() {\n      isValidToken().then(token => {\n        this.props.setAuthStatus(true);\n        this.shouldRedirect(this.props);\n      }).catch(() => {\n        this.props.setAuthStatus(false);\n        this.shouldRedirect(this.props);\n      });\n    }\n\n    shouldComponentUpdate(nextProps) {\n      this.shouldRedirect(nextProps);\n      return true;\n    }\n\n    shouldRedirect(props) {\n      const path = Router.pathname; // If we are on login/register and auth is complete, redirect to /panel\n      // Otherwise redirect to /login\n\n      if ((path === '/login' || path === '/register') && props.authStatus) {\n        Router.push('/panel');\n      } else if (path.startsWith('/panel') && !props.authStatus) {\n        Router.push('/login');\n      }\n    }\n\n    render() {\n      return __jsx(WrappedComponent, this.props);\n    }\n\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    authStatus: state.auth.status\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setAuthStatus: status => dispatch(actions.setAuthStatus(status))\n  };\n};\n\nexport default compose(connect(mapStateToProps, mapDispatchToProps), withAuth);","map":{"version":3,"sources":["/Users/binduraj/Documents/GitHub/dollarbank/web_Next/helper/hoc/WithAuth/index.js"],"names":["React","Component","Router","actions","compose","connect","updateAPIConfig","auth","checkValidToken","isValidToken","login","withAuth","WrappedComponent","getInitialProps","ctx","token","status","reduxStore","dispatch","authToken","setAuthStatus","componentProps","serverAuthStatus","constructor","props","componentDidMount","then","shouldRedirect","catch","shouldComponentUpdate","nextProps","path","pathname","authStatus","push","startsWith","render","mapStateToProps","state","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Router from 'next/router';\nimport * as actions from 'actions';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { updateAPIConfig } from 'api/base';\nimport { auth, checkValidToken, isValidToken, login } from 'tools'\n\n// Handle redirects for /login, /register and /panel\nconst withAuth = WrappedComponent => {\n   return class extends Component {\n       static async getInitialProps (ctx) {\n           // Tick the time once, so we'll have a\n           // valid time before first render\n           const token = auth(ctx),\n               status = !!token\n\n           const { reduxStore } = ctx,\n                { dispatch } = reduxStore\n\n           updateAPIConfig({ authToken: token })\n           dispatch(actions.setAuthStatus(status))\n\n           const componentProps =\n               WrappedComponent.getInitialProps &&\n               (await WrappedComponent.getInitialProps({\n                   ...ctx,\n                   serverAuthStatus: status,\n               }))\n\n           return {\n               ...componentProps,\n               serverAuthStatus: status,\n           }\n       }\n\n       constructor(props) {\n           super(props);\n\n           const token = checkValidToken()\n           if (token) {\n               updateAPIConfig({ authToken: token });\n           }\n       }\n\n       componentDidMount() {\n           isValidToken()\n               .then(token => {\n                   this.props.setAuthStatus(true);\n                   this.shouldRedirect(this.props);\n               })\n               .catch(() => {\n                   this.props.setAuthStatus(false);\n                   this.shouldRedirect(this.props);\n               });\n      }\n\n      shouldComponentUpdate(nextProps) {\n         this.shouldRedirect(nextProps);\n\n         return true;\n      }\n\n      shouldRedirect(props) {\n         const path = Router.pathname;\n         // If we are on login/register and auth is complete, redirect to /panel\n         // Otherwise redirect to /login\n         if ((path === '/login' || path === '/register') && props.authStatus) {\n             Router.push('/panel');\n         } else if (path.startsWith('/panel') && !props.authStatus) {\n             Router.push('/login');\n         }\n      }\n\n      render() {\n         return <WrappedComponent {...this.props} />;\n      }\n   };\n};\n\nconst mapStateToProps = state => {\n   return {\n      authStatus: state.auth.status\n   };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setAuthStatus: status => dispatch(actions.setAuthStatus(status))\n    };\n};\n\nexport default compose(\n   connect(mapStateToProps, mapDispatchToProps),\n   withAuth\n);\n"]},"metadata":{},"sourceType":"module"}