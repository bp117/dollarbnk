{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Router from 'next/router';\nimport * as actions from 'actions';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { updateAPIConfig } from 'api/base';\nimport { auth, checkValidToken, isValidToken, login } from 'tools'; // Handle redirects for /login, /register and /panel\n\nvar withAuth = function withAuth(WrappedComponent) {\n  return /*#__PURE__*/function (_Component) {\n    _inherits(_class, _Component);\n\n    var _super = _createSuper(_class);\n\n    _createClass(_class, null, [{\n      key: \"getInitialProps\",\n      value: function getInitialProps(ctx) {\n        var token, status, reduxStore, dispatch, componentProps;\n        return _regeneratorRuntime.async(function getInitialProps$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // Tick the time once, so we'll have a\n                // valid time before first render\n                token = auth(ctx), status = !!token;\n                reduxStore = ctx.reduxStore, dispatch = reduxStore.dispatch;\n                updateAPIConfig({\n                  authToken: token\n                });\n                dispatch(actions.setAuthStatus(status));\n                _context.t0 = WrappedComponent.getInitialProps;\n\n                if (!_context.t0) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 8;\n                return _regeneratorRuntime.awrap(WrappedComponent.getInitialProps(_objectSpread({}, ctx, {\n                  serverAuthStatus: status\n                })));\n\n              case 8:\n                _context.t0 = _context.sent;\n\n              case 9:\n                componentProps = _context.t0;\n                return _context.abrupt(\"return\", _objectSpread({}, componentProps, {\n                  serverAuthStatus: status\n                }));\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }\n    }]);\n\n    function _class(props) {\n      var _this;\n\n      _classCallCheck(this, _class);\n\n      _this = _super.call(this, props);\n      var token = checkValidToken();\n\n      if (token) {\n        updateAPIConfig({\n          authToken: token\n        });\n      }\n\n      return _this;\n    }\n\n    _createClass(_class, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n\n        isValidToken().then(function (token) {\n          _this2.props.setAuthStatus(true);\n\n          _this2.shouldRedirect(_this2.props);\n        })[\"catch\"](function () {\n          _this2.props.setAuthStatus(false);\n\n          _this2.shouldRedirect(_this2.props);\n        });\n      }\n    }, {\n      key: \"shouldComponentUpdate\",\n      value: function shouldComponentUpdate(nextProps) {\n        this.shouldRedirect(nextProps);\n        return true;\n      }\n    }, {\n      key: \"shouldRedirect\",\n      value: function shouldRedirect(props) {\n        var path = Router.pathname; // If we are on login/register and auth is complete, redirect to /panel\n        // Otherwise redirect to /login\n\n        if ((path === '/login' || path === '/register') && props.authStatus) {\n          Router.push('/panel');\n        } else if (path.startsWith('/panel') && !props.authStatus) {\n          Router.push('/login');\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        return __jsx(WrappedComponent, this.props);\n      }\n    }]);\n\n    return _class;\n  }(Component);\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    authStatus: state.auth.status\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setAuthStatus: function setAuthStatus(status) {\n      return dispatch(actions.setAuthStatus(status));\n    }\n  };\n};\n\nexport default compose(connect(mapStateToProps, mapDispatchToProps), withAuth);","map":null,"metadata":{},"sourceType":"module"}