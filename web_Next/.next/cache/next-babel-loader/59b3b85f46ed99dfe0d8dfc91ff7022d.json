{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport Router from 'next/router';\nimport * as actions from 'actions';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { updateAPIConfig } from 'api/base';\nimport { auth, checkValidToken, isValidToken, login } from 'tools'; // Handle redirects for /login, /register and /panel\n\nconst withAuth = WrappedComponent => {\n  return class extends Component {\n    static async getInitialProps(ctx) {\n      // Tick the time once, so we'll have a\n      // valid time before first render\n      const token = auth(ctx),\n            status = !!token;\n      const {\n        reduxStore\n      } = ctx,\n            {\n        dispatch\n      } = reduxStore;\n      updateAPIConfig({\n        authToken: token\n      });\n      dispatch(actions.setAuthStatus(status));\n      const componentProps = WrappedComponent.getInitialProps && (await WrappedComponent.getInitialProps(_objectSpread({}, ctx, {\n        serverAuthStatus: status\n      })));\n      return _objectSpread({}, componentProps, {\n        serverAuthStatus: status\n      });\n    }\n\n    constructor(props) {\n      super(props);\n      const token = checkValidToken();\n\n      if (token) {\n        updateAPIConfig({\n          authToken: token\n        });\n      }\n    }\n\n    componentDidMount() {\n      isValidToken().then(token => {\n        this.props.setAuthStatus(true);\n        this.shouldRedirect(this.props);\n      }).catch(() => {\n        this.props.setAuthStatus(false);\n        this.shouldRedirect(this.props);\n      });\n    }\n\n    shouldComponentUpdate(nextProps) {\n      this.shouldRedirect(nextProps);\n      return true;\n    }\n\n    shouldRedirect(props) {\n      const path = Router.pathname; // If we are on login/register and auth is complete, redirect to /panel\n      // Otherwise redirect to /login\n\n      if ((path === '/login' || path === '/register') && props.authStatus) {\n        Router.push('/panel');\n      } else if (path.startsWith('/panel') && !props.authStatus) {\n        Router.push('/login');\n      }\n    }\n\n    render() {\n      return __jsx(WrappedComponent, this.props);\n    }\n\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    authStatus: state.auth.status\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setAuthStatus: status => dispatch(actions.setAuthStatus(status))\n  };\n};\n\nexport default compose(connect(mapStateToProps, mapDispatchToProps), withAuth);","map":null,"metadata":{},"sourceType":"module"}