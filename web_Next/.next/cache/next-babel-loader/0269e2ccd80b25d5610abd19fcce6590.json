{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { Form, Field, withFormik } from 'formik';\nimport Link from 'next/link';\nimport * as Yup from 'yup';\nimport SingleModuleButton from 'components/UI/Buttons/SingleModuleButton';\n\nvar InnerForm = function InnerForm(props) {\n  var errors = props.errors,\n      touched = props.touched;\n  return __jsx(Form, {\n    className: \"login-form\"\n  }, __jsx(\"div\", null, __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(Field, {\n    type: \"email\",\n    className: \"form-control login-input\",\n    name: \"email\",\n    placeholder: \"Your email...\"\n  }), touched.email && errors.email && __jsx(\"p\", {\n    className: \"field-invalid\"\n  }, errors.email)), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(Field, {\n    type: \"password\",\n    className: \"form-control password-input\",\n    name: \"password\",\n    placeholder: \"Your password...\"\n  }), touched.password && errors.password && __jsx(\"p\", {\n    className: \"field-invalid\"\n  }, errors.password)), __jsx(\"div\", {\n    className: \"checkbox\"\n  }, __jsx(\"label\", null, __jsx(Field, {\n    type: \"checkbox\",\n    name: \"remember\"\n  }), \"Keep me signed in\")), __jsx(\"p\", null, __jsx(Link, {\n    href: \"/register\"\n  }, __jsx(\"a\", null, \"Don't have an account?\")))), __jsx(SingleModuleButton, {\n    text: \"Log in now\",\n    type: \"submit\"\n  }));\n}; // Wrap our form with the using withFormik HoC\n\n\nvar LoginForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: function mapPropsToValues(props) {\n    return {\n      email: '',\n      password: ''\n    };\n  },\n  // Add a custom validation function (this can be async too!)\n  validationSchema: Yup.object().shape({\n    email: Yup.string().required('Email is required').email('This is not a valid email'),\n    password: Yup.string().required('Password is required').min(6, 'Your password has to be at least 6 characters')\n  }),\n  // Submission handler\n  handleSubmit: function handleSubmit(values, _ref) {\n    var props = _ref.props,\n        setStatus = _ref.setStatus;\n    props.onLoginSubmit(values.email, values.password);\n  }\n})(InnerForm);\nexport default LoginForm;","map":null,"metadata":{},"sourceType":"module"}