{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { Form, Field, withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport SingleModuleButton from 'components/UI/Buttons/SingleModuleButton'; // API\n\nimport { sendHelpForm } from 'api/forms';\n\nvar InnerForm = function InnerForm(props) {\n  var errors = props.errors,\n      touched = props.touched;\n  return __jsx(Form, null, __jsx(\"div\", null, __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"name\"\n  }, \"Your name\"), __jsx(Field, {\n    id: \"name\",\n    type: \"text\",\n    className: \"form-control\",\n    name: \"name\",\n    placeholder: \"Your name...\"\n  }), touched.name && errors.name && __jsx(\"p\", {\n    className: \"field-invalid\"\n  }, errors.name)), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"email\"\n  }, \"Your email\"), __jsx(Field, {\n    id: \"email\",\n    type: \"email\",\n    className: \"form-control\",\n    name: \"email\",\n    placeholder: \"Your email...\"\n  }), touched.email && errors.email && __jsx(\"p\", {\n    className: \"field-invalid\"\n  }, errors.email)), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"subject\"\n  }, \"Subject\"), __jsx(Field, {\n    id: \"subject\",\n    component: \"select\",\n    className: \"form-control\",\n    name: \"subject\"\n  }, __jsx(\"option\", {\n    value: \"\",\n    disabled: true\n  }, \"Choose subject\"), __jsx(\"option\", null, \"Subject 1\"), __jsx(\"option\", null, \"Subject 2\"), __jsx(\"option\", null, \"Subject 3\")), touched.subject && errors.subject && __jsx(\"p\", {\n    className: \"field-invalid\"\n  }, errors.subject)), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"message\"\n  }, \"Message\"), __jsx(Field, {\n    id: \"message\",\n    component: \"textarea\",\n    rows: \"6\",\n    className: \"form-control\",\n    name: \"message\"\n  }), touched.message && errors.message && __jsx(\"p\", {\n    className: \"field-invalid\"\n  }, errors.message)), __jsx(\"p\", {\n    className: \"validation-info\"\n  }, props.status)), __jsx(SingleModuleButton, {\n    text: \"Send message\",\n    type: \"submit\"\n  }));\n}; // Wrap our form with the using withFormik HoC\n\n\nvar ContactForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: function mapPropsToValues(props) {\n    return {\n      name: '',\n      email: '',\n      subject: '',\n      message: ''\n    };\n  },\n  // Add a custom validation function (this can be async too!)\n  validationSchema: Yup.object().shape({\n    name: Yup.string().required('Name is required'),\n    email: Yup.string().required('Email is required').email('This is not a valid email'),\n    subject: Yup.string().required('Subject is required'),\n    message: Yup.string().required('Message is required').min(6, 'Please enter at least 6 characters')\n  }),\n  // Submission handler\n  handleSubmit: function handleSubmit(values, _ref) {\n    var props = _ref.props,\n        setStatus = _ref.setStatus;\n    var name = values.name,\n        email = values.email,\n        subject = values.subject,\n        message = values.message;\n    setStatus('Sending...');\n    sendHelpForm({\n      name: name,\n      email: email,\n      subject: subject,\n      message: message\n    }).then(function (res) {\n      return res.data;\n    }).then(function (res) {\n      return setStatus('Your message has been sent');\n    })[\"catch\"](function (err) {\n      return setStatus('Your message has been sent');\n    });\n  }\n})(InnerForm);\nexport default ContactForm;","map":{"version":3,"sources":["/Users/binduraj/Documents/GitHub/dollarbank/web_Next/components/components/Help/Form.js"],"names":["React","Form","Field","withFormik","Yup","SingleModuleButton","sendHelpForm","InnerForm","props","errors","touched","name","email","subject","message","status","ContactForm","mapPropsToValues","validationSchema","object","shape","string","required","min","handleSubmit","values","setStatus","then","res","data","err"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Form, Field, withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport SingleModuleButton from 'components/UI/Buttons/SingleModuleButton';\n\n// API\nimport { sendHelpForm } from 'api/forms';\n\nconst InnerForm = props => {\n   const { errors, touched } = props;\n\n   return (\n      <Form>\n         <div>\n            <div className=\"form-group\">\n               <label htmlFor=\"name\">Your name</label>\n               <Field\n                  id=\"name\"\n                  type=\"text\"\n                  className=\"form-control\"\n                  name=\"name\"\n                  placeholder=\"Your name...\"\n               />\n\n               {touched.name && errors.name && <p className=\"field-invalid\">{errors.name}</p>}\n            </div>\n\n            <div className=\"form-group\">\n               <label htmlFor=\"email\">Your email</label>\n               <Field\n                  id=\"email\"\n                  type=\"email\"\n                  className=\"form-control\"\n                  name=\"email\"\n                  placeholder=\"Your email...\"\n               />\n\n               {touched.email && errors.email && <p className=\"field-invalid\">{errors.email}</p>}\n            </div>\n\n            <div className=\"form-group\">\n               <label htmlFor=\"subject\">Subject</label>\n               <Field id=\"subject\" component=\"select\" className=\"form-control\" name=\"subject\">\n                  <option value=\"\" disabled>\n                     Choose subject\n                  </option>\n                  <option>Subject 1</option>\n                  <option>Subject 2</option>\n                  <option>Subject 3</option>\n               </Field>\n\n               {touched.subject && errors.subject && (\n                  <p className=\"field-invalid\">{errors.subject}</p>\n               )}\n            </div>\n\n            <div className=\"form-group\">\n               <label htmlFor=\"message\">Message</label>\n               <Field\n                  id=\"message\"\n                  component=\"textarea\"\n                  rows=\"6\"\n                  className=\"form-control\"\n                  name=\"message\"\n               />\n\n               {touched.message && errors.message && (\n                  <p className=\"field-invalid\">{errors.message}</p>\n               )}\n            </div>\n\n            <p className=\"validation-info\">{props.status}</p>\n         </div>\n\n         <SingleModuleButton text=\"Send message\" type=\"submit\" />\n      </Form>\n   );\n};\n\n// Wrap our form with the using withFormik HoC\nconst ContactForm = withFormik({\n   // Transform outer props into form values\n   mapPropsToValues: props => ({\n      name: '',\n      email: '',\n      subject: '',\n      message: ''\n   }),\n\n   // Add a custom validation function (this can be async too!)\n   validationSchema: Yup.object().shape({\n      name: Yup.string().required('Name is required'),\n      email: Yup.string()\n         .required('Email is required')\n         .email('This is not a valid email'),\n      subject: Yup.string().required('Subject is required'),\n      message: Yup.string()\n         .required('Message is required')\n         .min(6, 'Please enter at least 6 characters')\n   }),\n\n   // Submission handler\n   handleSubmit: (values, { props, setStatus }) => {\n      const { name, email, subject, message } = values;\n\n      setStatus('Sending...');\n\n      sendHelpForm({ name, email, subject, message })\n         .then(res => res.data)\n         .then(res => setStatus('Your message has been sent'))\n         .catch(err => setStatus('Your message has been sent'));\n   }\n})(InnerForm);\n\nexport default ContactForm;\n"]},"metadata":{},"sourceType":"module"}