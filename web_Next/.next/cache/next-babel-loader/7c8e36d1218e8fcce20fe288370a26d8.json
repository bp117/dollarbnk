{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { getMyTransfers, createTransfer } from 'api/transfers';\nimport * as actionTypes from './actionTypes';\nexport var fetchTransfers = function fetchTransfers() {\n  return function _callee(dispatch) {\n    var data;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            // Set status to false on every start, so it can be reusable\n            dispatch(fetchTransfersStatus(false));\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(getMyTransfers());\n\n          case 4:\n            data = _context.sent;\n\n            if (data) {\n              _context.next = 8;\n              break;\n            }\n\n            dispatch(fetchTransfersStatus(false));\n            return _context.abrupt(\"return\");\n\n          case 8:\n            dispatch({\n              type: actionTypes.FETCH_TRANSFERS,\n              data: data\n            });\n            _context.next = 14;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](0);\n            dispatch(fetchTransfersStatus(false));\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 11]], Promise);\n  };\n};\nexport var fetchTransfersStatus = function fetchTransfersStatus(status) {\n  return {\n    type: actionTypes.FETCH_TRANSFERS_STATUS,\n    status: status\n  };\n};\nexport var addTransfer = function addTransfer(data) {\n  return function _callee2(dispatch) {\n    var transData, transfer;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            transData = _objectSpread({}, data, {\n              amount: parseFloat(data.amount).toFixed(2),\n              date: new Date(),\n              payeeAccNumber: parseInt(data.payeeAccNumber, 10),\n              payeeSortcode: parseInt(data.payeeSortcode, 10),\n              status: 'Done',\n              type: 'Transfer'\n            });\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(createTransfer(transData));\n\n          case 4:\n            transfer = _context2.sent;\n\n            if (transfer) {\n              _context2.next = 8;\n              break;\n            }\n\n            dispatch(fetchTransfersStatus(false));\n            return _context2.abrupt(\"return\");\n\n          case 8:\n            dispatch({\n              type: actionTypes.ADD_TRANSFER,\n              data: transData\n            });\n            _context2.next = 14;\n            break;\n\n          case 11:\n            _context2.prev = 11;\n            _context2.t0 = _context2[\"catch\"](0);\n            dispatch(fetchTransfersStatus(false));\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 11]], Promise);\n  };\n};","map":{"version":3,"sources":["/Users/binduraj/Documents/GitHub/dollarbank/web_Next/helper/actions/transfers.js"],"names":["getMyTransfers","createTransfer","actionTypes","fetchTransfers","dispatch","fetchTransfersStatus","data","type","FETCH_TRANSFERS","status","FETCH_TRANSFERS_STATUS","addTransfer","transData","amount","parseFloat","toFixed","date","Date","payeeAccNumber","parseInt","payeeSortcode","transfer","ADD_TRANSFER"],"mappings":";;;;;;;AAAA,SAASA,cAAT,EAAyBC,cAAzB,QAA+C,eAA/C;AACA,OAAO,KAAKC,WAAZ,MAA6B,eAA7B;AAEA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA,SAAM,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE9B;AACAA,YAAAA,QAAQ,CAACC,oBAAoB,CAAC,KAAD,CAArB,CAAR;AAH8B;AAAA,6CAKXL,cAAc,EALH;;AAAA;AAKxBM,YAAAA,IALwB;;AAAA,gBAOzBA,IAPyB;AAAA;AAAA;AAAA;;AAQ3BF,YAAAA,QAAQ,CAACC,oBAAoB,CAAC,KAAD,CAArB,CAAR;AAR2B;;AAAA;AAY9BD,YAAAA,QAAQ,CAAC;AAAEG,cAAAA,IAAI,EAAEL,WAAW,CAACM,eAApB;AAAqCF,cAAAA,IAAI,EAAJA;AAArC,aAAD,CAAR;AAZ8B;AAAA;;AAAA;AAAA;AAAA;AAc9BF,YAAAA,QAAQ,CAACC,oBAAoB,CAAC,KAAD,CAArB,CAAR;;AAd8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAN;AAAA,CAAvB;AAkBP,OAAO,IAAMA,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAAI,MAAM;AAAA,SAAK;AAC5CF,IAAAA,IAAI,EAAEL,WAAW,CAACQ,sBAD0B;AAE5CD,IAAAA,MAAM,EAANA;AAF4C,GAAL;AAAA,CAAnC;AAKP,OAAO,IAAME,WAAW,GAAG,SAAdA,WAAc,CAAAL,IAAI;AAAA,SAAI,kBAAMF,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEvBQ,YAAAA,SAFuB,qBAGvBN,IAHuB;AAI1BO,cAAAA,MAAM,EAAEC,UAAU,CAACR,IAAI,CAACO,MAAN,CAAV,CAAwBE,OAAxB,CAAgC,CAAhC,CAJkB;AAK1BC,cAAAA,IAAI,EAAE,IAAIC,IAAJ,EALoB;AAM1BC,cAAAA,cAAc,EAAEC,QAAQ,CAACb,IAAI,CAACY,cAAN,EAAsB,EAAtB,CANE;AAO1BE,cAAAA,aAAa,EAAED,QAAQ,CAACb,IAAI,CAACc,aAAN,EAAqB,EAArB,CAPG;AAQ1BX,cAAAA,MAAM,EAAE,MARkB;AAS1BF,cAAAA,IAAI,EAAE;AAToB;AAAA;AAAA,6CAYNN,cAAc,CAACW,SAAD,CAZR;;AAAA;AAYvBS,YAAAA,QAZuB;;AAAA,gBAcxBA,QAdwB;AAAA;AAAA;AAAA;;AAe1BjB,YAAAA,QAAQ,CAACC,oBAAoB,CAAC,KAAD,CAArB,CAAR;AAf0B;;AAAA;AAmB7BD,YAAAA,QAAQ,CAAC;AACNG,cAAAA,IAAI,EAAEL,WAAW,CAACoB,YADZ;AAENhB,cAAAA,IAAI,EAAEM;AAFA,aAAD,CAAR;AAnB6B;AAAA;;AAAA;AAAA;AAAA;AAwB7BR,YAAAA,QAAQ,CAACC,oBAAoB,CAAC,KAAD,CAArB,CAAR;;AAxB6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAJ;AAAA,CAAxB","sourcesContent":["import { getMyTransfers, createTransfer } from 'api/transfers';\nimport * as actionTypes from './actionTypes';\n\nexport const fetchTransfers = () => async dispatch => {\n   try {\n      // Set status to false on every start, so it can be reusable\n      dispatch(fetchTransfersStatus(false));\n\n      const data = await getMyTransfers();\n\n      if (!data) {\n         dispatch(fetchTransfersStatus(false));\n         return;\n      }\n\n      dispatch({ type: actionTypes.FETCH_TRANSFERS, data });\n   } catch (err) {\n      dispatch(fetchTransfersStatus(false));\n   }\n};\n\nexport const fetchTransfersStatus = status => ({\n   type: actionTypes.FETCH_TRANSFERS_STATUS,\n   status\n});\n\nexport const addTransfer = data => async dispatch => {\n   try {\n      const transData = {\n         ...data,\n         amount: parseFloat(data.amount).toFixed(2),\n         date: new Date(),\n         payeeAccNumber: parseInt(data.payeeAccNumber, 10),\n         payeeSortcode: parseInt(data.payeeSortcode, 10),\n         status: 'Done',\n         type: 'Transfer'\n      };\n\n      const transfer = await createTransfer(transData);\n\n      if (!transfer) {\n         dispatch(fetchTransfersStatus(false));\n         return;\n      }\n\n      dispatch({\n         type: actionTypes.ADD_TRANSFER,\n         data: transData\n      });\n   } catch (err) {\n      dispatch(fetchTransfersStatus(false));\n   }\n};\n"]},"metadata":{},"sourceType":"module"}