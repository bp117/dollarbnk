{"ast":null,"code":"import format from 'date-fns/format';\nimport jwtDecode from 'jwt-decode';\nimport nextCookie from 'next-cookies';\nimport cookie from 'js-cookie';\nimport Router from 'next/router'; // Add padding from the start of the current string/number\n\nexport var myPadStart = function myPadStart(el, targetLength, padString) {\n  return el.toString().padStart(targetLength, padString);\n}; // Insert something after every n characters in the string\n\nexport var chunker = function chunker(el, step, string) {\n  var regExp = new RegExp(\".{\".concat(step, \"}\"), 'g');\n  return el.toString().match(regExp).join(string);\n}; // Format date\n\nexport var formatDate = function formatDate(date, dateFormat) {\n  return format(new Date(date), dateFormat);\n}; // Token checker\n\nexport var getAuthToken = function getAuthToken() {\n  return cookie.get('token');\n};\nexport var setAuthToken = function setAuthToken(token) {\n  cookie.set('token', token);\n};\nexport var removeAuthToken = function removeAuthToken() {\n  cookie.remove('token');\n};\nexport var isValidToken = function isValidToken() {\n  return new Promise(function (resolve, reject) {\n    var token = checkValidToken();\n\n    if (token) {\n      resolve(token);\n    } else {\n      reject();\n    }\n  });\n};\nexport var checkValidToken = function checkValidToken() {\n  var currentTime = Date.now().valueOf() / 1000;\n  var token = getAuthToken();\n\n  if (!token) {\n    return;\n  }\n\n  var decodedToken = jwtDecode(token); // If token expired - remove it\n\n  if (decodedToken.exp < currentTime) {\n    removeAuthToken();\n    return;\n  }\n\n  return token;\n};\nexport var auth = function auth(ctx) {\n  var _nextCookie = nextCookie(ctx),\n      token = _nextCookie.token,\n      pathname = ctx.pathname;\n\n  if (pathname === '/login') {\n    if (!token) {\n      return false;\n    }\n\n    if (false) {\n      ctx.res.writeHead(302, {\n        Location: '/panel'\n      });\n      ctx.res.end();\n    } else {\n      Router.push('/panel');\n    }\n  } // If there's no token, it means the user is not logged in.\n\n\n  if (!token) {\n    if (false) {\n      ctx.res.writeHead(302, {\n        Location: '/login'\n      });\n      ctx.res.end();\n    } else {\n      Router.push('/login');\n    }\n  }\n\n  return token;\n};","map":{"version":3,"sources":["/Users/binduraj/Documents/GitHub/dollarbank/web_Next/helper/tools/index.js"],"names":["format","jwtDecode","nextCookie","cookie","Router","myPadStart","el","targetLength","padString","toString","padStart","chunker","step","string","regExp","RegExp","match","join","formatDate","date","dateFormat","Date","getAuthToken","get","setAuthToken","token","set","removeAuthToken","remove","isValidToken","Promise","resolve","reject","checkValidToken","currentTime","now","valueOf","decodedToken","exp","auth","ctx","pathname","res","writeHead","Location","end","push"],"mappings":"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","sourcesContent":["import format from 'date-fns/format';\nimport jwtDecode from 'jwt-decode';\nimport nextCookie from 'next-cookies'\nimport cookie from 'js-cookie'\nimport Router from 'next/router'\n\n// Add padding from the start of the current string/number\nexport const myPadStart = (el, targetLength, padString) => {\n   return el.toString().padStart(targetLength, padString);\n};\n\n// Insert something after every n characters in the string\nexport const chunker = (el, step, string) => {\n   const regExp = new RegExp(`.{${step}}`, 'g');\n   return el\n      .toString()\n      .match(regExp)\n      .join(string);\n};\n\n// Format date\nexport const formatDate = (date, dateFormat) => format(new Date(date), dateFormat);\n\n// Token checker\nexport const getAuthToken = () => {\n   return cookie.get('token');\n};\n\nexport const setAuthToken = token => {\n   cookie.set('token', token)\n};\n\nexport const removeAuthToken = () => {\n   cookie.remove('token')\n};\n\nexport const isValidToken = () => {\n\n   return new Promise((resolve, reject) => {\n      const token = checkValidToken();\n\n      if (token) {\n          resolve(token)\n      } else {\n          reject()\n      }\n   });\n};\n\nexport const checkValidToken = () => {\n    const currentTime = Date.now().valueOf() / 1000;\n    const token = getAuthToken();\n\n    if (!token) {\n        return;\n    }\n\n    const decodedToken = jwtDecode(token);\n\n    // If token expired - remove it\n    if (decodedToken.exp < currentTime) {\n        removeAuthToken();\n        return;\n    }\n\n    return token;\n}\n\nexport const auth = ctx => {\n    const { token } = nextCookie(ctx),\n        { pathname } = ctx\n\n    if (pathname === '/login') {\n        if (!token)  {\n            return false\n        }\n\n        if (typeof window === 'undefined') {\n            ctx.res.writeHead(302, { Location: '/panel' })\n            ctx.res.end()\n        } else {\n            Router.push('/panel')\n        }\n    }\n\n\n    // If there's no token, it means the user is not logged in.\n    if (!token)  {\n        if (typeof window === 'undefined') {\n            ctx.res.writeHead(302, { Location: '/login' })\n            ctx.res.end()\n        } else {\n            Router.push('/login')\n        }\n    }\n\n    return token\n}"]},"metadata":{},"sourceType":"module"}