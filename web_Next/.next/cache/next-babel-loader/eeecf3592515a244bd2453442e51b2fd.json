{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { getMyMessages, toggleMessageRead, removeMessage } from 'api/messages';\nimport * as actionTypes from './actionTypes'; // Fetch messages\n\nexport var fetchMessages = function fetchMessages() {\n  return function _callee(dispatch) {\n    var data;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            // Set status to false on every start, so it can be reusable\n            dispatch(fetchMessagesStatus(false));\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(getMyMessages());\n\n          case 4:\n            data = _context.sent;\n\n            if (data) {\n              _context.next = 8;\n              break;\n            }\n\n            dispatch(fetchMessagesStatus(false));\n            return _context.abrupt(\"return\");\n\n          case 8:\n            dispatch({\n              type: actionTypes.FETCH_MESSAGES,\n              data: data\n            });\n            _context.next = 14;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](0);\n            dispatch(fetchMessagesStatus(false));\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 11]], Promise);\n  };\n};\nexport var fetchMessagesStatus = function fetchMessagesStatus(status) {\n  return {\n    type: actionTypes.FETCH_MESSAGES_STATUS,\n    status: status\n  };\n}; // Toggle message read\n\nexport var messageToggle = function messageToggle(id) {\n  return function _callee2(dispatch) {\n    var message;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(toggleMessageRead(id));\n\n          case 3:\n            message = _context2.sent;\n\n            if (message) {\n              _context2.next = 6;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 6:\n            dispatch({\n              type: actionTypes.MESSAGE_TOGGLE,\n              id: id\n            });\n            _context2.next = 11;\n            break;\n\n          case 9:\n            _context2.prev = 9;\n            _context2.t0 = _context2[\"catch\"](0);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  };\n}; // Remove message\n\nexport var messageRemove = function messageRemove(id) {\n  return function _callee3(dispatch) {\n    var message;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(removeMessage(id));\n\n          case 3:\n            message = _context3.sent;\n\n            if (message) {\n              _context3.next = 6;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 6:\n            dispatch({\n              type: actionTypes.MESSAGE_REMOVE,\n              id: id\n            });\n            _context3.next = 11;\n            break;\n\n          case 9:\n            _context3.prev = 9;\n            _context3.t0 = _context3[\"catch\"](0);\n\n          case 11:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  };\n};","map":{"version":3,"sources":["/Users/binduraj/Documents/GitHub/dollarbank/web_Next/helper/actions/messages.js"],"names":["getMyMessages","toggleMessageRead","removeMessage","actionTypes","fetchMessages","dispatch","fetchMessagesStatus","data","type","FETCH_MESSAGES","status","FETCH_MESSAGES_STATUS","messageToggle","id","message","MESSAGE_TOGGLE","messageRemove","MESSAGE_REMOVE"],"mappings":";AAAA,SAASA,aAAT,EAAwBC,iBAAxB,EAA2CC,aAA3C,QAAgE,cAAhE;AACA,OAAO,KAAKC,WAAZ,MAA6B,eAA7B,C,CAEA;;AACA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,SAAM,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE7B;AACAA,YAAAA,QAAQ,CAACC,mBAAmB,CAAC,KAAD,CAApB,CAAR;AAH6B;AAAA,6CAKVN,aAAa,EALH;;AAAA;AAKvBO,YAAAA,IALuB;;AAAA,gBAOxBA,IAPwB;AAAA;AAAA;AAAA;;AAQ1BF,YAAAA,QAAQ,CAACC,mBAAmB,CAAC,KAAD,CAApB,CAAR;AAR0B;;AAAA;AAY7BD,YAAAA,QAAQ,CAAC;AAAEG,cAAAA,IAAI,EAAEL,WAAW,CAACM,cAApB;AAAoCF,cAAAA,IAAI,EAAJA;AAApC,aAAD,CAAR;AAZ6B;AAAA;;AAAA;AAAA;AAAA;AAc7BF,YAAAA,QAAQ,CAACC,mBAAmB,CAAC,KAAD,CAApB,CAAR;;AAd6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAN;AAAA,CAAtB;AAkBP,OAAO,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAI,MAAM;AAAA,SAAK;AAC3CF,IAAAA,IAAI,EAAEL,WAAW,CAACQ,qBADyB;AAE3CD,IAAAA,MAAM,EAANA;AAF2C,GAAL;AAAA,CAAlC,C,CAKP;;AACA,OAAO,IAAME,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,EAAE;AAAA,SAAI,kBAAMR,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEPJ,iBAAiB,CAACY,EAAD,CAFV;;AAAA;AAEvBC,YAAAA,OAFuB;;AAAA,gBAIxBA,OAJwB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAQ7BT,YAAAA,QAAQ,CAAC;AAAEG,cAAAA,IAAI,EAAEL,WAAW,CAACY,cAApB;AAAoCF,cAAAA,EAAE,EAAFA;AAApC,aAAD,CAAR;AAR6B;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAJ;AAAA,CAAxB,C,CAYP;;AACA,OAAO,IAAMG,aAAa,GAAG,SAAhBA,aAAgB,CAAAH,EAAE;AAAA,SAAI,kBAAMR,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEPH,aAAa,CAACW,EAAD,CAFN;;AAAA;AAEvBC,YAAAA,OAFuB;;AAAA,gBAIxBA,OAJwB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAQ7BT,YAAAA,QAAQ,CAAC;AAAEG,cAAAA,IAAI,EAAEL,WAAW,CAACc,cAApB;AAAoCJ,cAAAA,EAAE,EAAFA;AAApC,aAAD,CAAR;AAR6B;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAJ;AAAA,CAAxB","sourcesContent":["import { getMyMessages, toggleMessageRead, removeMessage } from 'api/messages';\nimport * as actionTypes from './actionTypes';\n\n// Fetch messages\nexport const fetchMessages = () => async dispatch => {\n   try {\n      // Set status to false on every start, so it can be reusable\n      dispatch(fetchMessagesStatus(false));\n\n      const data = await getMyMessages();\n\n      if (!data) {\n         dispatch(fetchMessagesStatus(false));\n         return;\n      }\n\n      dispatch({ type: actionTypes.FETCH_MESSAGES, data });\n   } catch (err) {\n      dispatch(fetchMessagesStatus(false));\n   }\n};\n\nexport const fetchMessagesStatus = status => ({\n   type: actionTypes.FETCH_MESSAGES_STATUS,\n   status\n});\n\n// Toggle message read\nexport const messageToggle = id => async dispatch => {\n   try {\n      const message = await toggleMessageRead(id);\n\n      if (!message) {\n         return;\n      }\n\n      dispatch({ type: actionTypes.MESSAGE_TOGGLE, id });\n   } catch (err) {}\n};\n\n// Remove message\nexport const messageRemove = id => async dispatch => {\n   try {\n      const message = await removeMessage(id);\n\n      if (!message) {\n         return;\n      }\n\n      dispatch({ type: actionTypes.MESSAGE_REMOVE, id });\n   } catch (err) {}\n};\n"]},"metadata":{},"sourceType":"module"}