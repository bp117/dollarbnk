{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { getMyAccounts } from 'api/accounts';\nimport * as actionTypes from './actionTypes';\nexport var fetchAccounts = function fetchAccounts() {\n  return function _callee(dispatch) {\n    var data;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(getMyAccounts());\n\n          case 3:\n            data = _context.sent;\n\n            if (data) {\n              _context.next = 7;\n              break;\n            }\n\n            dispatch(fetchAccountsStatus(false));\n            return _context.abrupt(\"return\");\n\n          case 7:\n            dispatch({\n              type: actionTypes.FETCH_ACCOUNTS,\n              data: data\n            });\n            _context.next = 13;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            dispatch(fetchAccountsStatus(false)); // throw new Error('Accounts fetch failed');\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 10]], Promise);\n  };\n};\nexport var fetchAccountsStatus = function fetchAccountsStatus(status) {\n  return {\n    type: actionTypes.FETCH_ACCOUNTS_STATUS,\n    status: status\n  };\n};","map":{"version":3,"sources":["/Users/binduraj/Documents/GitHub/dollarbank/web_Next/helper/actions/accounts.js"],"names":["getMyAccounts","actionTypes","fetchAccounts","dispatch","data","fetchAccountsStatus","type","FETCH_ACCOUNTS","status","FETCH_ACCOUNTS_STATUS"],"mappings":";AAAA,SAASA,aAAT,QAA8B,cAA9B;AACA,OAAO,KAAKC,WAAZ,MAA6B,eAA7B;AAEA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,SAAM,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEVH,aAAa,EAFH;;AAAA;AAEvBI,YAAAA,IAFuB;;AAAA,gBAIxBA,IAJwB;AAAA;AAAA;AAAA;;AAK1BD,YAAAA,QAAQ,CAACE,mBAAmB,CAAC,KAAD,CAApB,CAAR;AAL0B;;AAAA;AAS7BF,YAAAA,QAAQ,CAAC;AAAEG,cAAAA,IAAI,EAAEL,WAAW,CAACM,cAApB;AAAoCH,cAAAA,IAAI,EAAJA;AAApC,aAAD,CAAR;AAT6B;AAAA;;AAAA;AAAA;AAAA;AAW7BD,YAAAA,QAAQ,CAACE,mBAAmB,CAAC,KAAD,CAApB,CAAR,CAX6B,CAY7B;;AAZ6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAN;AAAA,CAAtB;AAgBP,OAAO,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAG,MAAM;AAAA,SAAK;AAC3CF,IAAAA,IAAI,EAAEL,WAAW,CAACQ,qBADyB;AAE3CD,IAAAA,MAAM,EAANA;AAF2C,GAAL;AAAA,CAAlC","sourcesContent":["import { getMyAccounts } from 'api/accounts';\nimport * as actionTypes from './actionTypes';\n\nexport const fetchAccounts = () => async dispatch => {\n   try {\n      const data = await getMyAccounts();\n\n      if (!data) {\n         dispatch(fetchAccountsStatus(false));\n         return;\n      }\n\n      dispatch({ type: actionTypes.FETCH_ACCOUNTS, data });\n   } catch (err) {\n      dispatch(fetchAccountsStatus(false));\n      // throw new Error('Accounts fetch failed');\n   }\n};\n\nexport const fetchAccountsStatus = status => ({\n   type: actionTypes.FETCH_ACCOUNTS_STATUS,\n   status\n});\n"]},"metadata":{},"sourceType":"module"}